{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"T-Deck Keyboard","text":"<p>The T-Deck Keyboard project is an improved firmware for the T-Deck's keyboard. It provides firmware for the keyboard along with a minimal test program for the T-deck that reads key inputs from the keyboard and prints them over a serial connection. The keyboards firmware includes functionality for handling key presses, managing keyboard backlight brightness, and sending key and modifier information over I2C.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the T-Deck Keyboard project, visit the Usage page for a quick installation and usage guide. For an in-depth overview of the firmware\u2019s capabilities, consult the Functionality page, reference pages are also available at the Documentation site.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Extended Key Functionality: Supports special key combinations for enhanced functionality.</li> <li>Keymaps: Supports multiple keymaps including default and symbol keymaps (256 characters).</li> <li>Modifier Keys: Handles modifier keys such as Alt, Ctrl, Shift, and special function keys for mic and speaker control.</li> <li>Backlight Control: Allows for adjusting the keyboard backlight brightness with commands to toggle, increase, or decrease brightness.</li> <li>I2C Communication: Sends key and modifier information over I2C when requested.</li> </ul>"},{"location":"#files","title":"Files","text":"<ul> <li>tdeck/tdeck.ino: Basic test program that initializes the T-Deck, checks the keyboard, and reads key values.</li> <li>keyboard/kets.hpp: Header file defining key values.</li> <li>keyboard/keyboard.hpp: Header file defining keyboard functions, keymaps, and constants.</li> <li>keyboard/keyboard.cpp: Implementation of keyboard functions, keymaps, and I2C request handling.</li> <li>keyboard/keyboard.ino: Program to read the key matrix and send key information over I2C. This is the firmware for the keyboard.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are both encouraged and greatly appreciated, more information can be found on the Contributing page.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>Contributions are both encouraged and greatly appreciated.</p> <p>To contribute content, fork this repo and make a pull request to the master branch including your changes.</p> <ul> <li>On GitHub, fork the tdeck-keyboard repo</li> <li>Clone your newly created repo. (Note: replace your-username with your GitHub username)</li> </ul> <p>via ssh:</p> <pre><code>git clone git@github.com:your-username/tdeck-keyboard\n</code></pre> <p>via https:</p> <pre><code>git clone https://github.com/your-username/tdeck-keyboard\n</code></pre> <ul> <li>Navigate to the repo and create a new topic branch</li> </ul> <pre><code>cd tdeck-keyboard\ngit checkout -b foobar\n</code></pre> <ul> <li>After making modifications, commit and push your changes to your topic branch</li> <li>Open a PR against the tdeck-keyboard main branch</li> </ul>"},{"location":"CONTRIBUTING/#run-the-documentation-server-locally","title":"Run the documentation server locally","text":"<p>This documentation can be built and run locally.</p> <ul> <li>The build process for mkdocs utilizes Python</li> <li>It is recommended to install python pip dependencies inside of a Virtual Environment (venv)</li> </ul> <p>Note: You may need to first install <code>python3-venv</code> or the equivalent for your distribution</p> <ul> <li>Navigate to your <code>tdeck-keyboard</code> repo</li> <li>Create the python virtual environment</li> </ul> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <ul> <li>Install mkdocs dependencies to the venv</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Run the documentation server locally</li> </ul> <pre><code>mkdocs serve\n</code></pre> <ul> <li>View your changes at http://localhost:8000</li> </ul>"},{"location":"TODO/","title":"TODO","text":"<ul> <li>[x] create keymaps for different layouts:<ul> <li>[x] default</li> <li>[x] caps</li> <li>[x] ctrl</li> <li>[x] symbol_1 - symbol_n</li> </ul> </li> <li>[x] create keymapIndex variable (int) to track which keymap to use</li> <li>[x] create modifiers (bools) for alt, mic, speaker (may need to create bools for different tables or order the if statements in sendKeyInfo() ?)</li> <li>[x] create keyInfo array with key_value and modifiers and implement in sendKeyInfo()</li> <li>[x] callbacks for onRequest() and onReceive()</li> <li>[x] helpers for iskeyReleased(), isKeyHeld()</li> <li>[x] readKeyMatrix() to read the key matrix and update the key values</li> <li>[x] sendKeyInfo() to get the key from the appropriate table using the helpers, send all modifiers and the key value in KeyInfo format<ul> <li>[x] default keymap is (0)</li> <li>[x] use both shift keys for caps lock, single key for normal shift, if normal shift take from the caps table as well</li> <li>[x] use alt + c for ctrl</li> <li>[x] symbol + backspace cycles forward through the others (1 to n)</li> <li>[x] caps</li> <li>[x] alt</li> <li>[x] alt toggle</li> <li>[x] ctrl</li> <li>[x] ctrl toggle</li> <li>[x] del</li> <li>[x] tab</li> <li>[x] mic enable via toggle</li> <li>[x] mic enable</li> <li>[x] mic volume up</li> <li>[x] mic volume down</li> <li>[x] speaker enable toggle</li> <li>[x] speaker enable</li> <li>[x] speaker volume up</li> <li>[x] speaker volume down</li> <li>[x] symbol forward</li> <li>[x] symbol backward</li> <li>[x] lock symbol</li> <li>[x] backspace</li> <li>[x] enter</li> <li>[x] normal key</li> <li>[x] refactor combos<ul> <li>[x] [a-z]             </li> <li>[x] ENTER             </li> <li>[x] SPACE             </li> <li>[x] BACKSPACE         </li> <li>[x] ALT + [a-z]       </li> <li>[x] ALT + ENTER       </li> <li>[x] ALT + SPACE       </li> <li>[x] ALT + BACKSPACE   </li> <li>[x] ALT + RSHIFT      </li> <li>[x] LSHIFT (held)     </li> <li>[x] LSHIFT + ENTER    </li> <li>[x] LSHIFT + SPACE    </li> <li>[x] LSHIFT + BACKSPACE</li> <li>[x] MIC + ENTER       </li> <li>[x] MIC + BACKSPACE   </li> <li>[x] MIC + RSHIFT      </li> <li>[x] $ + ENTER         </li> <li>[x] $ + BACKSPACE     </li> <li>[x] $ + RSHIFT        </li> <li>[x] SYM (held)        </li> <li>[x] SYM + ENTER       </li> <li>[x] SYM + SPACE       </li> <li>[x] SYM + BACKSPACE   </li> <li>[x] RSHIFT (held)     </li> <li>[x] RSHIFT + SPACE    </li> </ul> </li> <li>[x] held/repeated keys</li> <li>[x] test the functionality</li> <li>[ ] test edge cases</li> <li>[x] Update special handling for $ key (new keymaps)</li> <li>[ ] rows should be columns and columns should be rows</li> </ul> </li> <li>[x] Basic usage documentation</li> <li>[x] Refactor T-Deck test firmware to use for testing the library (basic)</li> </ul>"},{"location":"functionality/","title":"Functionality","text":"<p>The keyboard supports multiple keymaps and special key combinations to enhance its functionality. It includes default keymaps for regular typing and several symbol keymaps for special characters. The keyboard also supports key combinations for controlling the backlight, toggling locks (Alt, Ctrl, Caps, Symbol), and adjusting the volume for the mic and speaker.</p>"},{"location":"functionality/#keymaps","title":"Keymaps","text":"<ul> <li>Default Keymap: Contains the standard alphanumeric characters and some special keys.</li> <li>Symbol Keymaps: Provide access to various symbols and special characters. There are multiple symbol keymaps that can be cycled through using specific key combinations.</li> </ul>"},{"location":"functionality/#key-combinations","title":"Key Combinations","text":"<p>The keyboard supports a variety of key combinations to enhance its functionality. These combinations allow users to perform actions such as adjusting the backlight, toggling locks, and custom functions to be used for controlling the volume of the mic and speaker. Below is a table that outlines the key combinations and their corresponding functionalities:</p> KEY/COMBINATION FUNCTIONALITY [a-z] Type lowercase letters BACKSPACE Sends the backspace character ENTER Sends the enter character SPACE Sends the space character ALT + [a-z] Send the character being pressed along with a bool representing the <code>alt</code> key ALT + BACKSPACE Increase the backlight brightness ALT + ENTER Decrease the backlight brightness ALT + SPACE Toggle the Alt lock, subsequent key presses will follow the same functionality as holding the <code>alt</code> key ALT + RSHIFT Toggle the backlight on or off ALT + MIC Mic function 1, recommended for toggling the microphone on or off ALT + $ Speaker function 1, recommended for toggling the speaker on or off LSHIFT + [a-z] Type uppercase letters LSHIFT + BACKSPACE Sends the delete character LSHIFT + ENTER Sends the tab character LSHIFT + SPACE Toggle the Caps Lock, subsequent key presses will follow the same functionality as holding the <code>lshift</code> key LSHIFT + MIC Mic function 2, recommended for decreasing the microphone volume LSHIFT + $ Speaker function 2, recommended for decreasing the speaker volume SYM + [a-z] Send the character for that key from symbol keymap 1 SYM + BACKSPACE Cycle forward through the symbol keymaps SYM + ENTER Cycle backward through the symbol keymaps SYM + SPACE Toggle the Symbol lock, subsequent key presses will send keys from the relevant symbol keymap RSHIFT + [a-z] Send the character being pressed along with a bool representing the <code>ctrl</code> key RSHIFT + SPACE Toggle the Ctrl lock, subsequent key presses will follow the same functionality as holding the <code>rshift</code> key RSHIFT + MIC Mic function 3, recommended for increasing the microphone volume RSHIFT + $ Speaker function 3, recommended for increasing the speaker volume"},{"location":"functionality/#available-characters","title":"Available Characters","text":"<p>The following table shows the available characters for the keymaps. Symbol tables 4-8 are not currently implemented in the firmware. The characters are displayed in the following format:</p> <ul> <li><code>q</code> (113, 0x71) </li> </ul> <p>Where <code>q</code> is the character, <code>113</code> is the decimal value, and <code>0x71</code> is the hexadecimal value. The characters shown in the table are based on the CP437 font used by <code>TFT_eSPI</code> and correspond to the key values for those positions within the font, if another font is used then the characters may be different but they will relate to the character in the same position within the font.</p> DEFAULT CAPS SYMBOL 1 SYMBOL 2 SYMBOL 3 <code>q</code> (113, 0x71) <code>Q</code> (81, 0x51) <code>#</code> (35, 0x23) <code>`</code> (96, 0x60) <code>\u2320</code> (218, 0xDA) <code>w</code> (119, 0x77) <code>W</code> (87, 0x57) <code>1</code> (49, 0x31) <code>%</code> (37, 0x25) <code>\u2321</code> (217, 0xD9) <code>e</code> (101, 0x65) <code>E</code> (69, 0x45) <code>2</code> (50, 0x32) <code>&amp;</code> (38, 0x26) <code>\u00f7</code> (246, 0xF6) <code>r</code> (114, 0x72) <code>R</code> (82, 0x52) <code>3</code> (51, 0x33) <code>\u00a3</code> (163, 0xA3) <code>\u00a5</code> (165, 0xA5) <code>t</code> (116, 0x74) <code>T</code> (84, 0x54) <code>(</code> (40, 0x28) <code>{</code> (123, 0x7B) <code>[</code> (91, 0x5B) <code>y</code> (121, 0x79) <code>Y</code> (89, 0x59) <code>)</code> (41, 0x29) <code>}</code> (125, 0x7D) <code>]</code> (93, 0x5D) <code>u</code> (117, 0x75) <code>U</code> (85, 0x55) <code>_</code> (95, 0x5F) <code>^</code> (94, 0x5E) <code>\u00b1</code> (177, 0xB1) <code>i</code> (105, 0x69) <code>I</code> (73, 0x49) <code>-</code> (45, 0x2D) <code>&lt;</code> (60, 0x3C) <code>\u2264</code> (243, 0xF3) <code>o</code> (111, 0x6F) <code>O</code> (79, 0x4F) <code>+</code> (43, 0x2B) <code>&gt;</code> (62, 0x3E) <code>\u2265</code> (242, 0xF2) <code>p</code> (112, 0x70) <code>P</code> (80, 0x50) <code>@</code> (64, 0x40) <code>=</code> (61, 0x3D) <code>\u2261</code> (240, 0xF0) <code>a</code> (97, 0x61) <code>A</code> (65, 0x41) <code>*</code> (42, 0x2A) <code>\u00aa</code> (166, 0xA6) <code>\u2248</code> (247, 0xF7) <code>s</code> (115, 0x73) <code>S</code> (83, 0x53) <code>4</code> (52, 0x34) <code>\u00ba</code> (167, 0xA7) <code>\u00b0</code> (248, 0xF8) <code>d</code> (100, 0x64) <code>D</code> (68, 0x44) <code>5</code> (53, 0x35) <code>\u2310</code> (169, 0xA9) <code>\u2219</code> (249, 0xF9) <code>f</code> (102, 0x66) <code>F</code> (70, 0x46) <code>6</code> (54, 0x36) <code>\u00ac</code> (170, 0xAA) <code>\u00b7</code> (250, 0xFA) <code>g</code> (103, 0x67) <code>G</code> (71, 0x47) <code>/</code> (47, 0x2F) <code>\\</code> (92, 0x5C) <code>\u221a</code> (251, 0xFB) <code>h</code> (104, 0x68) <code>H</code> (72, 0x48) <code>:</code> (58, 0x3A) <code>\u00bd</code> (171, 0xAB) <code>\\|</code> (92, 0x5C) <code>j</code> (106, 0x6A) <code>J</code> (74, 0x4A) <code>;</code> (59, 0x3B) <code>\u00bc</code> (172, 0xAC) <code>\u0192</code> (159, 0x9F) <code>k</code> (107, 0x6B) <code>K</code> (75, 0x4B) <code>'</code> (39, 0x27) <code>\u00ab</code> (174, 0xAE) <code>l</code> (108, 0x6C) <code>L</code> (76, 0x4C) <code>\"</code> (34, 0x22) <code>\u00bb</code> (175, 0xAF) <code>z</code> (122, 0x7A) <code>Z</code> (90, 0x5A) <code>7</code> (55, 0x37) <code>\u00b5</code> (230, 0xE6) <code>x</code> (120, 0x78) <code>X</code> (88, 0x58) <code>8</code> (56, 0x38) <code>\u221e</code> (236, 0xEC) <code>c</code> (99, 0x63) <code>C</code> (67, 0x43) <code>9</code> (57, 0x39) <code>\u00b2</code> (253, 0xFD) <code>\u207f</code> (252, 0xFC) <code>v</code> (118, 0x76) <code>V</code> (86, 0x56) <code>?</code> (63, 0x3F) <code>\u00bf</code> (168, 0xA8) <code>b</code> (98, 0x62) <code>B</code> (66, 0x42) <code>!</code> (33, 0x21) <code>\u00a1</code> (173, 0xAD) <code>n</code> (110, 0x6E) <code>N</code> (78, 0x4E) <code>,</code> (44, 0x2C) <code>\u2229</code> (239, 0xEF) <code>m</code> (109, 0x6D) <code>M</code> (77, 0x4D) <code>.</code> (46, 0x2E) <code>~</code> (126, 0x7E) <code>$</code> (36, 0x24) <code>\u00a2</code> (155, 0x9B) <code>\u20a7</code> (158, 0x9E) <code>MIC</code> <code>0</code> (48, 0x30) <code>NBSP</code> (255, 0xFF) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) DEFAULT SYMBOL 4 SYMBOL 5 SYMBOL 6 SYMBOL 7 SYMBOL 8 <code>q</code> (113, 0x71) <code>\u00e2</code> (131, 0x83) <code>\u00d6</code> (153, 0x99) <code>\u2502</code> (179, 0xB3) <code>\u256c</code> (206, 0xCE) <code>ENQ</code> (5, 0x05) <code>w</code> (119, 0x77) <code>\u00e4</code> (132, 0x84) <code>\u00f3</code> (162, 0xA2) <code>\u2524</code> (180, 0xB4) <code>\u2567</code> (207, 0xCF) <code>ACK</code> (6, 0x06) <code>e</code> (101, 0x65) <code>\u00e0</code> (133, 0x85) <code>\u00fc</code> (129, 0x81) <code>\u2561</code> (181, 0xB5) <code>\u2568</code> (208, 0xD0) <code>BEL</code> (7, 0x07) <code>r</code> (114, 0x72) <code>\u00e5</code> (134, 0x86) <code>\u00fb</code> (150, 0x96) <code>\u2562</code> (182, 0xB6) <code>\u2564</code> (209, 0xD1) <code>BS</code> (8, 0x08) <code>t</code> (116, 0x74) <code>\u00e1</code> (160, 0xA0) <code>\u00f9</code> (151, 0x97) <code>\u2556</code> (183, 0xB7) <code>\u2565</code> (210, 0xD2) <code>TAB</code> (9, 0x09) <code>y</code> (121, 0x79) <code>\u00c4</code> (142, 0x8E) <code>\u00dc</code> (154, 0x9A) <code>\u2555</code> (184, 0xB8) <code>\u2559</code> (211, 0xD3) <code>LF</code> (10, 0x0A) <code>u</code> (117, 0x75) <code>\u00c5</code> (143, 0x8F) <code>\u00fa</code> (163, 0xA3) <code>\u2563</code> (185, 0xB9) <code>\u2558</code> (212, 0xD4) <code>VT</code> (11, 0x0B) <code>i</code> (105, 0x69) <code>\u00e6</code> (145, 0x91) <code>\u00ff</code> (152, 0x98) <code>\u2551</code> (186, 0xBA) <code>\u2552</code> (213, 0xD5) <code>FF</code> (12, 0x0C) <code>o</code> (111, 0x6F) <code>\u00c6</code> (146, 0x92) <code>\u03b1</code> (224, 0xE0) <code>\u2557</code> (187, 0xBB) <code>\u2553</code> (214, 0xD6) <code>CR</code> (13, 0x0D) <code>p</code> (112, 0x70) <code>\u00e7</code> (135, 0x87) <code>\u0393</code> (226, 0xE2) <code>\u255d</code> (188, 0xBC) <code>\u256b</code> (215, 0xD7) <code>SO</code> (14, 0x0E) <code>a</code> (97, 0x61) <code>\u00c7</code> (128, 0x80) <code>\u03c0</code> (227, 0xE3) <code>\u255c</code> (189, 0xBD) <code>\u256a</code> (216, 0xD8) <code>SI</code> (15, 0x0F) <code>s</code> (115, 0x73) <code>\u00df</code> (225, 0xE1) <code>\u03a3</code> (228, 0xE4) <code>\u255b</code> (190, 0xBE) <code>\u2518</code> (217, 0xD9) <code>DLE</code>(16, 0x10) <code>d</code> (100, 0x64) <code>\u00e9</code> (130, 0x82) <code>\u03c3</code> (229, 0xE5) <code>\u2510</code> (191, 0xBF) <code>\u250c</code> (218, 0xDA) <code>DC1</code>(17, 0x11) <code>f</code> (102, 0x66) <code>\u00ea</code> (136, 0x88) <code>\u03c4</code> (231, 0xE7) <code>\u2514</code> (192, 0xC0) <code>\u2588</code> (219, 0xDB) <code>DC2</code>(18, 0x12) <code>g</code> (103, 0x67) <code>\u00eb</code> (137, 0x89) <code>\u03a6</code> (232, 0xE8) <code>\u2534</code> (193, 0xC1) <code>\u2584</code> (220, 0xDC) <code>DC3</code>(19, 0x13) <code>h</code> (104, 0x68) <code>\u00e8</code> (138, 0x8A) <code>\u0398</code> (233, 0xE9) <code>\u252c</code> (194, 0xC2) <code>\u258c</code> (221, 0xDD) <code>DC4</code>(20, 0x14) <code>j</code> (106, 0x6A) <code>\u00c9</code> (144, 0x90) <code>\u03a9</code> (234, 0xEA) <code>\u251c</code> (195, 0xC3) <code>\u2590</code> (222, 0xDE) <code>NAK</code>(21, 0x15) <code>k</code> (107, 0x6B) <code>\u00ef</code> (139, 0x8B) <code>\u03b4</code> (235, 0xEB) <code>\u2500</code> (196, 0xC4) <code>\u2580</code> (223, 0xDF) <code>SYN</code>(22, 0x16) <code>l</code> (108, 0x6C) <code>\u00ee</code> (140, 0x8C) <code>\u03c6</code> (237, 0xED) <code>\u253c</code> (197, 0xC5) <code>\u25a0</code> (254, 0xFE) <code>ETB</code>(23, 0x17) <code>z</code> (122, 0x7A) <code>\u00ec</code> (141, 0x8D) <code>\u03b5</code> (238, 0xEE) <code>\u255e</code> (198, 0xC6) <code>\u2591</code> (176, 0xB0) <code>CAN</code>(24, 0x18) <code>x</code> (120, 0x78) <code>\u00ed</code> (161, 0xA1) <code>\u255f</code> (199, 0xC7) <code>\u2592</code> (177, 0xB1) <code>EM</code> (25, 0x19) <code>c</code> (99, 0x63) <code>\u00f1</code> (164, 0xA4) <code>\u255a</code> (200, 0xC8) <code>\u2593</code> (178, 0xB2) <code>SUB</code>(26, 0x1A) <code>v</code> (118, 0x76) <code>\u00d1</code> (165, 0xA5) <code>\u2554</code> (201, 0xC9) <code>NUL</code> (0, 0x00) <code>ESC</code>(27, 0x1B) <code>b</code> (98, 0x62) <code>\u00f4</code> (147, 0x93) <code>\u2569</code> (202, 0xCA) <code>SOH</code> (1, 0x01) <code>FS</code>(28, 0x1C) <code>n</code> (110, 0x6E) <code>\u00f6</code> (148, 0x94) <code>\u2566</code> (203, 0xCB) <code>STX</code> (2, 0x02) <code>GS</code>(29, 0x1D) <code>m</code> (109, 0x6D) <code>\u00f2</code> (149, 0x95) <code>\u2560</code> (204, 0xCC) <code>ETX</code> (3, 0x03) <code>RS</code>(30, 0x1E) <code>$</code> (36, 0x24) <code>\u2550</code> (205, 0xCD) <code>EOT</code> (4, 0x04) <code>US</code>(31, 0x1F) <code>MIC</code> <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>SPACE</code> (32, 0x20) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>BACKSPACE</code> (8, 0x08) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D) <code>ENTER</code> (13, 0x0D)"},{"location":"usage/","title":"Usage","text":"<p>The T-Deck contains an ESP32C3 configured as an I2C slave to read the keyboard inputs. It's accessed using the 6 pin connector holes below the reset button. The controller can be programmed using the Arduino IDE, VS Code, etc.</p>"},{"location":"usage/#hardware-setup","title":"Hardware Setup","text":"<p>There are many ways to program this controller, you can use something like the FTDI TTL-232R-3V3 USB To Serial Cable or an Arduino Uno. Connect the pins as shown in either of the methods below. To put the ESP32C3 into programming mode, short the BOOT pin to ground and power it on. </p> <ul> <li>the header doesnt use standard breadboard spaced holes so you might want to use wires.</li> <li>the ESP32C3 controller has to be turned on by pin 10 in the main ESP32S3 sketch, so make sure the T-Deck's firmware does that (the provided test firmware does).</li> </ul>"},{"location":"usage/#method-1-using-an-arduino-uno","title":"Method 1: Using An Arduino Uno","text":"<ul> <li>GND on the Ardunio Uno to GND on the Arduino, this is required for the serial communication to work.</li> <li>TX to TX (T-Deck &gt;&gt;&gt; Arduino Uno), </li> <li>RX to RX (T-Deck &gt;&gt;&gt; Arduino Uno), </li> <li>GND to GND (T-Deck &gt;&gt;&gt; Arduino Uno),</li> <li>Short the T-Deck's BOOT pin to the T-Decks GND pin to put the ESP32C3 into programming mode.</li> </ul>"},{"location":"usage/#method-2-using-a-ftdi-cable","title":"Method 2: Using A FTDI Cable","text":"<ul> <li>TX to RX (T-Deck &gt;&gt;&gt; Arduino Uno),</li> <li>RX to TX (T-Deck &gt;&gt;&gt; Arduino Uno),</li> <li>GND to GND (T-Deck &gt;&gt;&gt; Arduino Uno),</li> <li>Short the T-Deck's BOOT pin to the T-Decks GND pin to put the ESP32C3 into programming mode.</li> </ul> <pre><code>t-deck    |\n         |=|  rst button       ftdi cable\n          |                ____________\n          |               | RTS         Green\n        o | TX  ----------| RX          Yellow\n        o | RX  ----------| TX          Orange\n        o | BOOT----|     | VCC         Red\n        o | RST     |     | CTS         Brown\n        o | GND ----o-----| GND         Black\n        o | VCC           |_____________\n          |             \n-|       /\n_|______/\n</code></pre>"},{"location":"usage/#software-settings","title":"Software Settings","text":"<p>The Arduino IDE configuration in the tools menu:</p> <ul> <li>Board -&gt; ESP32C3 Dev Module</li> <li>USB CDC On Boot -&gt; disabled</li> <li>CPU Frequency -&gt; 40MHz</li> <li>USB DFU On Boot -&gt; Disable</li> <li>Flash Mode -&gt; DIO 40MHz</li> <li>Flash Size -&gt; 4MB(32Mb)</li> <li>Partition Scheme -&gt; Default 4Mb with spifs</li> <li>Upload Speed -&gt; 921600</li> </ul> <p>Select the COM/SERIAL port of the USB to serial cable. Once the controller is in programming mode (it'll print a message over the UART saying \"waiting for download\" when powered up with the BOOT pin shorted to ground) press download on the Arduino IDE and it should upload the firmware. Restart the device afterwards.</p>"},{"location":"usage/#using-the-keyboard-on-the-t-deck","title":"Using The Keyboard On The T-Deck","text":"<p>The keyboard is accessed using the I2C interface, the test program provided reads the values from the keyboard and prints them over the serial connection. The keyboard will send a keyInfo array over I2C when requested, this array contains the key value, and <code>bools</code> for modifiers and custom functions. For information on how to flash the test program to your T-Deck please refer to the official T-Deck Github repository.</p>"},{"location":"t-deck-keyboard/annotated/","title":"Class List","text":"<p>No classes, structs, unions or interfaces found.</p>"},{"location":"t-deck-keyboard/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir keyboard <ul> <li>file keyboard.cpp Implementation of keyboard functions and keymaps. </li> <li>file keyboard.hpp Header file for keyboard functions and keymaps. </li> <li>file keys.hpp Header file for keys. </li> </ul> </li> </ul>"},{"location":"t-deck-keyboard/dir_fb0b1e2663c8abb876623317aa8e6792/","title":"Dir keyboard","text":"<p>FileList &gt; keyboard</p>"},{"location":"t-deck-keyboard/dir_fb0b1e2663c8abb876623317aa8e6792/#files","title":"Files","text":"Type Name file keyboard.cpp Implementation of keyboard functions and keymaps. file keyboard.hpp Header file for keyboard functions and keymaps. file keys.hpp Header file for keys. <p>The documentation for this class was generated from the following file <code>keyboard/</code></p>"},{"location":"t-deck-keyboard/keyboard_8cpp/","title":"File keyboard.cpp","text":"<p>FileList &gt; keyboard &gt; keyboard.cpp</p> <p>Go to the source code of this file</p> <p>Implementation of keyboard functions and keymaps. More...</p> <ul> <li><code>#include \"keyboard.hpp\"</code></li> <li><code>#include \"keys.hpp\"</code></li> </ul>"},{"location":"t-deck-keyboard/keyboard_8cpp/#public-attributes","title":"Public Attributes","text":"Type Name bool altLock   = <code>false</code> bool backlightState   = <code>true</code> bool capsLock   = <code>false</code> uint8_t cols   = <code>{0, 3, 19, 12, 18, 6, 7}</code> bool ctrlLock   = <code>false</code> uint8_t currentBrightness   = <code>119</code> char defaultKeymap   = <code>/* multi line expression */</code> uint8_t emptyData   = <code>{0x00, false, false, false, false, false, false}</code> uint8_t keyInfo   = <code>{0x00, false, false, false, false, false, false}</code> unsigned long keyRepeatStart   = <code>0</code> KeyState keyStates uint8_t keymapIndex   = <code>0</code> bool lastValue uint8_t rows   = <code>{1, 4, 5, 11, 13}</code> uint8_t sendData   = <code>{0x00, false, false, false, false, false, false}</code> bool sendDataFlag   = <code>false</code> char symbolKeymap1   = <code>/* multi line expression */</code> char symbolKeymap2   = <code>/* multi line expression */</code> char symbolKeymap3   = <code>/* multi line expression */</code> char symbolKeymap4   = <code>/* multi line expression */</code> char symbolKeymap5   = <code>/* multi line expression */</code> char symbolKeymap6   = <code>/* multi line expression */</code> char symbolKeymap7   = <code>/* multi line expression */</code> char symbolKeymap8   = <code>/* multi line expression */</code> bool symbolLock   = <code>false</code>"},{"location":"t-deck-keyboard/keyboard_8cpp/#public-functions","title":"Public Functions","text":"Type Name void autoResetKeymapIndex () Handles resetting the keymap index. bool doesKeyExistInKeymap (int rowIndex, int colIndex, char keymap) Checks if a key exists in the keymap. void handleCharacter (int rowIndex, int colIndex) Handles the character for a specific key. bool keyHeld (int rowIndex, int colIndex) Checks if a key is being held. bool keyNotPressed (int rowIndex, int colIndex) Checks if a key is not pressed. bool keyPressed (int rowIndex, int colIndex) Checks if a key was pressed. bool keyReleased (int rowIndex, int colIndex) Checks if a key was released. void onRequest () Handles I2C requests. void printKeyInfo (uint8_t data) Prints the key information. void readKeyMatrix () Reads the key matrix and updates the key states. void sendKeyInfo () Sends the key information over I2C. void setDefaultCharacter (int rowIndex, int colIndex) Sets the default character for a key. void setKeyboardBrightness (uint8_t command) Sets the keyboard backlight brightness. void setSymbolCharacter (int rowIndex, int colIndex) Sets the symbol character for a key."},{"location":"t-deck-keyboard/keyboard_8cpp/#detailed-description","title":"Detailed Description","text":"<p>Author:</p> <p>hreikin (hreikin@gmail.com) @license MIT </p> <p>Copyright:</p> <p>Copyright (c) 2025 hreikin (hreikin@gmail.com) </p> <p>Date:</p> <p>2025-03-07 </p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-altlock","title":"variable altLock","text":"<pre><code>bool altLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-backlightstate","title":"variable backlightState","text":"<pre><code>bool backlightState;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-capslock","title":"variable capsLock","text":"<pre><code>bool capsLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-cols","title":"variable cols","text":"<pre><code>uint8_t cols[];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-ctrllock","title":"variable ctrlLock","text":"<pre><code>bool ctrlLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-currentbrightness","title":"variable currentBrightness","text":"<pre><code>uint8_t currentBrightness;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-defaultkeymap","title":"variable defaultKeymap","text":"<pre><code>char defaultKeymap[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-emptydata","title":"variable emptyData","text":"<pre><code>uint8_t emptyData[KEY_INFO_SIZE];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-keyinfo","title":"variable keyInfo","text":"<pre><code>uint8_t keyInfo[KEY_INFO_SIZE];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-keyrepeatstart","title":"variable keyRepeatStart","text":"<pre><code>unsigned long keyRepeatStart;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-keystates","title":"variable keyStates","text":"<pre><code>KeyState keyStates[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-keymapindex","title":"variable keymapIndex","text":"<pre><code>uint8_t keymapIndex;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-lastvalue","title":"variable lastValue","text":"<pre><code>bool lastValue[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-rows","title":"variable rows","text":"<pre><code>uint8_t rows[];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-senddata","title":"variable sendData","text":"<pre><code>uint8_t sendData[KEY_INFO_SIZE];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-senddataflag","title":"variable sendDataFlag","text":"<pre><code>bool sendDataFlag;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap1","title":"variable symbolKeymap1","text":"<pre><code>char symbolKeymap1[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap2","title":"variable symbolKeymap2","text":"<pre><code>char symbolKeymap2[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap3","title":"variable symbolKeymap3","text":"<pre><code>char symbolKeymap3[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap4","title":"variable symbolKeymap4","text":"<pre><code>char symbolKeymap4[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap5","title":"variable symbolKeymap5","text":"<pre><code>char symbolKeymap5[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap6","title":"variable symbolKeymap6","text":"<pre><code>char symbolKeymap6[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap7","title":"variable symbolKeymap7","text":"<pre><code>char symbolKeymap7[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbolkeymap8","title":"variable symbolKeymap8","text":"<pre><code>char symbolKeymap8[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#variable-symbollock","title":"variable symbolLock","text":"<pre><code>bool symbolLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8cpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"t-deck-keyboard/keyboard_8cpp/#function-autoresetkeymapindex","title":"function autoResetKeymapIndex","text":"<p>Handles resetting the keymap index. <pre><code>void autoResetKeymapIndex () \n</code></pre></p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-doeskeyexistinkeymap","title":"function doesKeyExistInKeymap","text":"<p>Checks if a key exists in the keymap. <pre><code>bool doesKeyExistInKeymap (\n    int rowIndex,\n    int colIndex,\n    char keymap\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> <li><code>keymap</code> The keymap to check. </li> </ul> <p>Returns:</p> <p>true if the key exists in the keymap, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-handlecharacter","title":"function handleCharacter","text":"<p>Handles the character for a specific key. <pre><code>void handleCharacter (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-keyheld","title":"function keyHeld","text":"<p>Checks if a key is being held. <pre><code>bool keyHeld (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key is being held, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-keynotpressed","title":"function keyNotPressed","text":"<p>Checks if a key is not pressed. <pre><code>bool keyNotPressed (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key is not pressed, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-keypressed","title":"function keyPressed","text":"<p>Checks if a key was pressed. <pre><code>bool keyPressed (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key was pressed, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-keyreleased","title":"function keyReleased","text":"<p>Checks if a key was released. <pre><code>bool keyReleased (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key was released, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-onrequest","title":"function onRequest","text":"<p>Handles I2C requests. <pre><code>void onRequest () \n</code></pre></p> <p>Sends the key data over I2C when requested. </p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-printkeyinfo","title":"function printKeyInfo","text":"<p>Prints the key information. <pre><code>void printKeyInfo (\n    uint8_t data\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> The key data array. </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-readkeymatrix","title":"function readKeyMatrix","text":"<p>Reads the key matrix and updates the key states. <pre><code>void readKeyMatrix () \n</code></pre></p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-sendkeyinfo","title":"function sendKeyInfo","text":"<p>Sends the key information over I2C. <pre><code>void sendKeyInfo () \n</code></pre></p>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-setdefaultcharacter","title":"function setDefaultCharacter","text":"<p>Sets the default character for a key. <pre><code>void setDefaultCharacter (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Sets keyInfo to the correct character for a specific key, from the default keymap only.</p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-setkeyboardbrightness","title":"function setKeyboardBrightness","text":"<p>Sets the keyboard backlight brightness. <pre><code>void setKeyboardBrightness (\n    uint8_t command\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>command</code> The command to set the brightness (toggle, up, down). </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8cpp/#function-setsymbolcharacter","title":"function setSymbolCharacter","text":"<p>Sets the symbol character for a key. <pre><code>void setSymbolCharacter (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Sets keyInfo to the correct character for a specific key, from the symbol keymaps only.</p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>The documentation for this class was generated from the following file <code>keyboard/keyboard.cpp</code></p>"},{"location":"t-deck-keyboard/keyboard_8cpp_source/","title":"File keyboard.cpp","text":"<p>File List &gt; keyboard &gt; keyboard.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"keyboard.hpp\"\n#include \"keys.hpp\"\n\nuint8_t rows[] = {1, 4, 5, 11, 13};\nuint8_t cols[] = {0, 3, 19, 12, 18, 6, 7};\n\nbool lastValue[ROW_COUNT][COL_COUNT];\nKeyState keyStates[ROW_COUNT][COL_COUNT];\n// Keys wrapped in square brackets require special handling\n// default column in functionality.md\n// { q, w, [sym],           a, [alt], [space],    [mic] }\n// { e, s,     d,           p,     x,       z, [lshift] }\n// { r, g,     t,    [rshift],     v,       c,        f }\n// { u, h,     y,     [enter],     b,       n,        j }\n// { o, l,     i, [backspace],   [$],       m,        k }\nchar defaultKeymap[ROW_COUNT][COL_COUNT] = {                                                                                  \n    {LATIN_SMALL_LETTER_Q, LATIN_SMALL_LETTER_W, NULL, LATIN_SMALL_LETTER_A, NULL, NULL, NULL},                                          \n    {LATIN_SMALL_LETTER_E, LATIN_SMALL_LETTER_S, LATIN_SMALL_LETTER_D, LATIN_SMALL_LETTER_P, LATIN_SMALL_LETTER_X, LATIN_SMALL_LETTER_Z, NULL},                     \n    {LATIN_SMALL_LETTER_R, LATIN_SMALL_LETTER_G, LATIN_SMALL_LETTER_T, NULL, LATIN_SMALL_LETTER_V, LATIN_SMALL_LETTER_C, LATIN_SMALL_LETTER_F},                     \n    {LATIN_SMALL_LETTER_U, LATIN_SMALL_LETTER_H, LATIN_SMALL_LETTER_Y, NULL, LATIN_SMALL_LETTER_B, LATIN_SMALL_LETTER_N, LATIN_SMALL_LETTER_J},                     \n    {LATIN_SMALL_LETTER_O, LATIN_SMALL_LETTER_L, LATIN_SMALL_LETTER_I, NULL, DOLLAR_SIGN, LATIN_SMALL_LETTER_M, LATIN_SMALL_LETTER_K}                  \n};\n// symbol 1 column in functionality.md\n// { #, 1, [sym],           *, [alt], [space],      [0] }\n// { 2, 4,     5,           @,     8,       7, [lshift] }\n// { 3, /,     (,    [rshift],     ?,       9,        6 }\n// { _, :,     ),     [enter],     !,       ,,        ; }\n// { +, \",     -, [backspace],   [\u00a2],       .,        ' }\nchar symbolKeymap1[ROW_COUNT][COL_COUNT] = {                                                                                  \n    {NUMBER_SIGN, DIGIT_ONE, NULL, ASTERISK, NULL, NULL, DIGIT_ZERO},                                          \n    {DIGIT_TWO, DIGIT_FOUR, DIGIT_FIVE, COMMERCIAL_AT, DIGIT_EIGHT, DIGIT_SEVEN, NULL},                                             \n    {DIGIT_THREE, SOLIDUS, LEFT_PARENTHESIS, NULL, QUESTION_MARK, DIGIT_NINE, DIGIT_SIX},                        \n    {LOW_LINE, COLON, RIGHT_PARENTHESIS, NULL, EXCLAMATION_MARK, COMMA, SEMICOLON},   \n    {PLUS_SIGN, QUOTATION_MARK, HYPHEN_MINUS, NULL, CENT_SIGN, FULL_STOP, APOSTROPHE} \n};\n// symbol 2 column in functionality.md\n// { `, %, [sym],           \u00aa, [alt], [space],   [NBSP] }\n// { &amp;, \u00ba,     \u2310,           =,     \u221e,       \u00b5, [lshift] }\n// { \u00a3, \\,     {,    [rshift],     \u00bf,       \u00b2,        \u00ac }\n// { ^, \u00bd,     },     [enter],     \u00a1,       \u2229,        \u00bc }\n// { &gt;, \u00bb,     &lt;, [backspace],   [\u20a7],       ~,        \u00ab }\nchar symbolKeymap2[ROW_COUNT][COL_COUNT] = {\n    {GRAVE_ACCENT, PERCENT_SIGN, NULL, FEMININE_ORDINAL_INDICATOR, NULL, NULL, NO_BREAK_SPACE},\n    {AMPERSAND, MASCULINE_ORDINAL_INDICATOR, REVERSED_NOT_SIGN, EQUALS_SIGN, INFINITY, MICRO_SIGN, NULL},\n    {POUND_SIGN, REVERSE_SOLIDUS, LEFT_CURLY_BRACKET, NULL, INVERTED_QUESTION_MARK, SUPERSCRIPT_TWO, NOT_SIGN},\n    {CIRCUMFLEX_ACCENT, VULGAR_FRACTION_ONE_HALF, RIGHT_CURLY_BRACKET, NULL, INVERTED_EXCLAMATION_MARK, INTERSECTION, VULGAR_FRACTION_ONE_QUARTER},\n    {GREATER_THAN_SIGN, RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK, LESS_THAN_SIGN, NULL, PESETA_SIGN, TILDE, LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK}\n};\n// symbol 3 column in functionality.md\n// { \u2320,    \u2321, [sym],           \u2248,  [alt], [space],   [NULL] }\n// { \u00f7,    \u00b0,     \u2219,           \u2261,   NULL,    NULL, [lshift] }\n// { \u00a5,    \u221a,     [,    [rshift],   NULL,       \u207f,        \u00b7 }\n// { \u00b1,    \\,     ],     [enter],   NULL,    NULL,        \u0192 }\n// { \u2265, NULL,     \u2264, [backspace], [NULL],    NULL,     NULL }\nchar symbolKeymap3[ROW_COUNT][COL_COUNT] = {\n    {TOP_HALF_INTEGRAL, BOTTOM_HALF_INTEGRAL, NULL, ALMOST_EQUAL_TO, NULL, NULL, NULL},\n    {DIVISION_SIGN, DEGREE_SIGN, BULLET_OPERATOR, IDENTICAL_TO, NULL, NULL, NULL},\n    {YEN_SIGN, SQUARE_ROOT, LEFT_SQUARE_BRACKET, NULL, NULL, SUPERSCRIPT_LATIN_SMALL_LETTER_N, MIDDLE_DOT},\n    {PLUS_MINUS_SIGN, REVERSE_SOLIDUS, RIGHT_SQUARE_BRACKET, NULL, NULL, NULL, LATIN_SMALL_LETTER_F_WITH_HOOK},\n    {GREATER_THAN_OR_EQUAL_TO, NULL, LESS_THAN_OR_EQUAL_TO, NULL, NULL, NULL, NULL}\n};\n// symbol 4 column in functionality.md\n// { \u00e2, \u00e4, [sym],           \u00c7,  [alt], [space],   [NULL] }\n// { \u00e0, \u00df,     \u00e9,           \u00e7,      \u00ed,       \u00ec, [lshift] }\n// { \u00e5, \u00eb,     \u00e1,    [rshift],      \u00d1,       \u00f1,        \u00ea }\n// { \u00c5, \u00e8,     \u00c4,     [enter],      \u00f4,       \u00f6,        \u00c9 }\n// { \u00c6, \u00ee,     \u00e6, [backspace], [NULL],       \u00f2,        \u00ef }\nchar symbolKeymap4[ROW_COUNT][COL_COUNT] = {\n    {LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX, LATIN_SMALL_LETTER_A_WITH_DIAERESIS, NULL, LATIN_CAPITAL_LETTER_C_WITH_CEDILLA, NULL, NULL, NULL},\n    {LATIN_SMALL_LETTER_A_WITH_GRAVE, LATIN_SMALL_LETTER_SHARP_S, LATIN_SMALL_LETTER_E_WITH_ACUTE, LATIN_SMALL_LETTER_C_WITH_CEDILLA, LATIN_SMALL_LETTER_I_WITH_ACUTE, LATIN_SMALL_LETTER_I_WITH_GRAVE, NULL},\n    {LATIN_SMALL_LETTER_A_WITH_RING_ABOVE, LATIN_SMALL_LETTER_E_WITH_DIAERESIS, LATIN_SMALL_LETTER_A_WITH_ACUTE, NULL, LATIN_CAPITAL_LETTER_N_WITH_TILDE, LATIN_SMALL_LETTER_N_WITH_TILDE, LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX},\n    {LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE, LATIN_SMALL_LETTER_E_WITH_GRAVE, LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS, NULL, LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX, LATIN_SMALL_LETTER_O_WITH_DIAERESIS, LATIN_CAPITAL_LETTER_E_WITH_ACUTE},\n    {LATIN_CAPITAL_LIGATURE_AE, LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX, LATIN_SMALL_LIGATURE_AE, NULL, NULL, LATIN_SMALL_LETTER_O_WITH_GRAVE, LATIN_SMALL_LETTER_I_WITH_DIAERESIS}\n};\n// symbol 5 column in functionality.md\n// { \u00d6, \u00f3, [sym],           \u03c0,  [alt], [space],   [NULL] }\n// { \u00fc, \u03a3,     \u03c3,           \u0393,   NULL,       \u03b5, [lshift] }\n// { \u00fb, \u03a6,     \u00f9,    [rshift],   NULL,    NULL,        \u03c4 }\n// { \u00fa, \u0398,     \u00dc,     [enter],   NULL,    NULL,        \u03a9 }\n// { \u03b1, \u03c6,     \u00ff, [backspace], [NULL],    NULL,        \u03b4 }\nchar symbolKeymap5[ROW_COUNT][COL_COUNT] = {\n    {LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS, LATIN_SMALL_LETTER_O_WITH_ACUTE, NULL, GREEK_SMALL_LETTER_PI, NULL, NULL, NULL},\n    {LATIN_SMALL_LETTER_U_WITH_DIAERESIS, GREEK_CAPITAL_LETTER_SIGMA, GREEK_SMALL_LETTER_SIGMA, GREEK_CAPITAL_LETTER_GAMMA, NULL, GREEK_SMALL_LETTER_EPSILON, NULL},\n    {LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX, GREEK_CAPITAL_LETTER_PHI, LATIN_SMALL_LETTER_U_WITH_GRAVE, NULL, NULL, NULL, GREEK_SMALL_LETTER_TAU},\n    {LATIN_SMALL_LETTER_U_WITH_ACUTE, GREEK_CAPITAL_LETTER_THETA, LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS, NULL, NULL, NULL, GREEK_CAPITAL_LETTER_OMEGA},\n    {GREEK_SMALL_LETTER_ALPHA, GREEK_SMALL_LETTER_PHI, LATIN_SMALL_LETTER_Y_WITH_DIAERESIS, NULL, NULL, NULL, GREEK_SMALL_LETTER_DELTA}\n};\n// symbol 6 column in functionality.md\n// { \u2502, \u2524, [sym],           \u255c, [alt], [space],   [NULL] }\n// { \u2561, \u255b,     \u2510,           \u255d,     \u255f,       \u255e, [lshift] }\n// { \u2562, \u2534,     \u2556,    [rshift],     \u2554,       \u255a,        \u2514 }\n// { \u2563, \u252c,     \u2555,     [enter],     \u2569,       \u2566,        \u251c }\n// { \u2557, \u253c,     \u2551, [backspace],   [\u2550],       \u2560,        \u2500 }\nchar symbolKeymap6[ROW_COUNT][COL_COUNT] = {\n    {BOX_DRAWINGS_LIGHT_VERTICAL, BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT, NULL, BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE, NULL, NULL, NULL},\n    {BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE, BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE, BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT, BOX_DRAWINGS_DOUBLE_UP_AND_LEFT, BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE, BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE, NULL},\n    {BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE, BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL, BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE, NULL, BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT, BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT, BOX_DRAWINGS_LIGHT_UP_AND_RIGHT},\n    {BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT, BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL, BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE, NULL, BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL, BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL, BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT},\n    {BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT, BOX_DRAWINGS_LIGHT_VERTICAL_AND_HORIZONTAL, BOX_DRAWINGS_DOUBLE_VERTICAL, NULL, BOX_DRAWINGS_DOUBLE_HORIZONTAL, BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL, BOX_DRAWINGS_LIGHT_HORIZONTAL}\n};\n\n// symbol 7 column in functionality.md\n// { \u256c, \u256c, [sym],           \u256a, [alt], [space],   [NULL] }\n// { \u2568, \u2518,     \u250c,           \u256b,     \u2592,       \u2591, [lshift] }\n// { \u2564, \u2584,     \u2565,    [rshift],   NUL,       \u2593,        \u2588 }\n// { \u2558, \u258c,     \u2559,     [enter],   SOH,     STX,        \u2590 }\n// { \u2553, \u25a0,     \u2552, [backspace], [EOT],     ETX,        \u2580 }\nchar symbolKeymap7[ROW_COUNT][COL_COUNT] = {\n    {BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL, BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL, NULL, BOX_DRAWINGS_VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE, NULL, NULL, NULL},\n    {BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE, BOX_DRAWINGS_LIGHT_UP_AND_LEFT, BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT, BOX_DRAWINGS_VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE, LIGHT_SHADE, MEDIUM_SHADE, NULL},\n    {BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE, LOWER_HALF_BLOCK, BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE, NUL_CHAR, NULL, DARK_SHADE, FULL_BLOCK},\n    {BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE, LEFT_HALF_BLOCK, BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE, NULL, START_OF_HEADING, START_OF_TEXT, RIGHT_HALF_BLOCK},\n    {BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE, BLACK_SQUARE, BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE, NULL, END_OF_TRANSMISSION, END_OF_TEXT, UPPER_HALF_BLOCK}\n};\n\n// symbol 8 column in functionality.md\n// { ENQ, ACK, [sym],          SI, [alt], [space],   [NULL] }\n// { BEL, DLE,   DC1,          SO,    EM,     CAN, [lshift] }\n// {  BS, DC3,   TAB,    [rshift],   ESC,     SUB,      DC2 }\n// {  VT, DC4,    LF,     [enter],    FS,      GS,      NAK }\n// {  CR, ETB,    FF, [backspace],  [US],      RS,      SYN }\nchar symbolKeymap8[ROW_COUNT][COL_COUNT] = {\n    {ENQUIRY, ACKNOWLEDGE, NULL, SHIFT_IN, NULL, NULL, NULL},\n    {BELL, DATA_LINK_ESCAPE, DEVICE_CONTROL_ONE, SHIFT_OUT, END_OF_MEDIUM, CANCEL, NULL},\n    {BACKSPACE, DEVICE_CONTROL_THREE, HORIZONTAL_TABULATION, NULL, ESCAPE, SUBSTITUTE, DEVICE_CONTROL_TWO},\n    {VERTICAL_TABULATION, DEVICE_CONTROL_FOUR, LINE_FEED, NULL, FILE_SEPARATOR, GROUP_SEPARATOR, NEGATIVE_ACKNOWLEDGE},\n    {CARRIAGE_RETURN, END_OF_TRANSMISSION_BLOCK, FORM_FEED, NULL, UNIT_SEPARATOR, RECORD_SEPARATOR, SYNCHRONOUS_IDLE}\n};\n\nbool altLock = false;\nbool ctrlLock = false;\nbool capsLock = false;\nbool symbolLock = false;\nbool backlightState = true;\nbool sendDataFlag = false;\nuint8_t keymapIndex = 0;                                                               // defaultKeymap = 0, symbolKeymap1 = 1, symbol_keymap2 = 2, etc.\nuint8_t keyInfo[KEY_INFO_SIZE] = {0x00, false, false, false, false, false, false};     // key_value, alt, ctrl, shift, sym, mic, speaker\nuint8_t sendData[KEY_INFO_SIZE] = {0x00, false, false, false, false, false, false};    // key_value, alt, ctrl, shift, sym, mic, speaker\nuint8_t emptyData[KEY_INFO_SIZE] = {0x00, false, false, false, false, false, false};   // empty array to send when no key is pressed\nuint8_t currentBrightness = 119;                                                       // Default brightness level\nunsigned long keyRepeatStart = 0;\n\nvoid onRequest()\n{\n    if (sendDataFlag) {\n        Wire.write(sendData, KEY_INFO_SIZE);\n        sendDataFlag = false;\n        Serial.print(\"sendData : \");\n        for (int i = 0; i &lt; KEY_INFO_SIZE; i++) {\n            Serial.print(sendData[i]);\n            Serial.print(\" \");\n        }\n        Serial.println();\n    } else {\n        Wire.write(emptyData, KEY_INFO_SIZE); // Use the temporary array\n    }\n}\n\nvoid setKeyboardBrightness(uint8_t command)\n{\n    if (command == FUNCTION_TOGGLE) {\n        if (backlightState) {\n            currentBrightness = KEYBOARD_BRIGHTNESS_MIN;\n        } else {\n            currentBrightness = KEYBOARD_BRIGHTNESS_DEFAULT;\n        }\n    } else if (command == FUNCTION_UP) {\n        if (currentBrightness &lt; KEYBOARD_BRIGHTNESS_MAX) {\n            if (currentBrightness &gt;= KEYBOARD_BRIGHTNESS_MAX - KEYBOARD_BRIGHTNESS_STEP) {\n                currentBrightness = KEYBOARD_BRIGHTNESS_MAX;\n            } else {\n                currentBrightness += KEYBOARD_BRIGHTNESS_STEP;\n            }\n        }\n    } else if (command == FUNCTION_DOWN) {\n        if (currentBrightness &gt; KEYBOARD_BRIGHTNESS_MIN) {\n            if (currentBrightness &lt;= KEYBOARD_BRIGHTNESS_MIN + KEYBOARD_BRIGHTNESS_STEP) {\n                currentBrightness = KEYBOARD_BRIGHTNESS_MIN;\n            } else {\n                currentBrightness -= KEYBOARD_BRIGHTNESS_STEP;\n            }\n        }\n    }\n    // If the toggle is on/off and the user increments/decrements the brightness then ensure \n    // the backlight state is set correctly\n    if (currentBrightness &gt; KEYBOARD_BRIGHTNESS_MIN) {\n        backlightState = true;\n    } else {\n        backlightState = false;\n    }\n    ledcWrite(KEYBOARD_BRIGHTNESS_CH, currentBrightness);\n}\n\nbool keyReleased(int rowIndex, int colIndex)\n{\n    return keyStates[rowIndex][colIndex] == RELEASED;\n}\n\nbool keyHeld(int rowIndex, int colIndex)\n{\n    return keyStates[rowIndex][colIndex] == HELD;\n}\n\nbool keyPressed(int rowIndex, int colIndex)\n{\n    return keyStates[rowIndex][colIndex] == PRESSED;\n}\n\nbool keyNotPressed(int rowIndex, int colIndex)\n{\n    return keyStates[rowIndex][colIndex] == NOT_PRESSED;\n}\n\nbool doesKeyExistInKeymap(int rowIndex, int colIndex, char keymap[ROW_COUNT][COL_COUNT])\n{\n    return keymap[rowIndex][colIndex] != NULL;\n}\n\nvoid printKeyInfo(uint8_t data[KEY_INFO_SIZE])\n{\n    // print all the keyInfo array values\n    Serial.print(\"char: \");\n    Serial.println(data[0]);\n    Serial.print(\"alt: \");\n    Serial.println(data[1]);\n    Serial.print(\"ctrl: \");\n    Serial.println(data[2]);\n    Serial.print(\"shift: \");\n    Serial.println(data[3]);\n    Serial.print(\"sym: \");\n    Serial.println(data[4]);\n    Serial.print(\"mic: \");\n    Serial.println(data[5]);\n    Serial.print(\"speaker: \");\n    Serial.println(data[6]);\n    Serial.println(\"************************************\");\n}\n\nvoid autoResetKeymapIndex()\n{\n    if (symbolLock == false) {\n        keymapIndex = MIN_KEYMAP_INDEX;\n    }\n}\n\nvoid setDefaultCharacter(int rowIndex, int colIndex)\n{\n    // modifiers, alt, ctrl, shift\n    if (altLock || keyHeld(0, 4)) {\n        keyInfo[1] = true;\n    }\n    if (ctrlLock || keyHeld(2, 3)) {\n        keyInfo[2] = true;\n    }\n    // shift is not applied when caps lock is on unlike the others, this is intended so the host can differentiate between the two\n    if (keyHeld(1, 6)) {\n        keyInfo[3] = true;\n    }\n    // key value\n    if (capsLock || keyHeld(1, 6)) {\n        keyInfo[0] = defaultKeymap[rowIndex][colIndex] - 32;\n    }\n    else {\n        keyInfo[0] = defaultKeymap[rowIndex][colIndex];\n    }\n}\n\nvoid setSymbolCharacter(int rowIndex, int colIndex)\n{\n    // symbol 1\n    if ((keymapIndex == 1 || keyHeld(0, 2)) &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap1)) {\n        keyInfo[0] = symbolKeymap1[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // symbol 2\n    else if (keymapIndex == 2 &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap2)) {\n        keyInfo[0] = symbolKeymap2[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // symbol 3\n    else if (keymapIndex == 3 &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap3)) {\n        keyInfo[0] = symbolKeymap3[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // symbol 4\n    else if (keymapIndex == 4 &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap4)) {\n        keyInfo[0] = symbolKeymap4[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // symbol 5\n    else if (keymapIndex == 5 &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap5)) {\n        keyInfo[0] = symbolKeymap5[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // symbol 6\n    else if (keymapIndex == 6 &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap6)) {\n        keyInfo[0] = symbolKeymap6[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // symbol 7\n    else if (keymapIndex == 7 &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap7)) {\n        keyInfo[0] = symbolKeymap7[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // symbol 7 special handling for NUL character\n    else if (keymapIndex == 7 &amp;&amp; (keyHeld(2, 4) || keyPressed(2, 4))) {\n        keyInfo[0] = symbolKeymap7[rowIndex][colIndex];\n        autoResetKeymapIndex();\n        keyInfo[4] = true;  // set the symbol flag if it is the NUL character (not NULL from an empty space)\n    }\n    // symbol 8\n    else if (keymapIndex == 8 &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, symbolKeymap8)) {\n        keyInfo[0] = symbolKeymap8[rowIndex][colIndex];\n        autoResetKeymapIndex();\n    }\n    // set the symbol flag if the character isnt NULL (special handling above for NUL character)\n    if (keyInfo[0] != NULL) {\n        keyInfo[4] = true;\n    }\n}\n\nvoid handleCharacter(int rowIndex, int colIndex) {\n    // a-z key, alt, ctrl, shift, alt lock, ctrl lock, caps lock, symbol (held)\n    if ((keymapIndex == MIN_KEYMAP_INDEX || altLock || keyHeld(0, 4) || ctrlLock || keyHeld(2, 3) || capsLock || keyHeld(1, 6) || keyHeld(0, 2)) &amp;&amp; doesKeyExistInKeymap(rowIndex, colIndex, defaultKeymap)) {\n        if (keyHeld(0, 2)) {\n            setSymbolCharacter(rowIndex, colIndex);\n        }\n        else {\n            setDefaultCharacter(rowIndex, colIndex);\n        }\n    }\n    // symbol\n    else if (keymapIndex &gt; MIN_KEYMAP_INDEX) {\n        setSymbolCharacter(rowIndex, colIndex);\n    }\n}\n\nvoid readKeyMatrix()\n{\n    // iterate the columns\n    for (int rowIndex = 0; rowIndex &lt; ROW_COUNT; rowIndex++) {\n        // col: set to output to low\n        uint8_t curRow = rows[rowIndex];\n        pinMode(curRow, OUTPUT);\n        digitalWrite(curRow, LOW);\n\n        // row: iterate through the rows\n        for (int colIndex = 0; colIndex &lt; COL_COUNT; colIndex++) {\n            uint8_t curCol = cols[colIndex];\n            pinMode(curCol, INPUT_PULLUP);\n            delay(1); // arduino is not fast enough to switch input/output modes so wait 1 ms\n\n            bool buttonPressed = (digitalRead(curCol) == LOW);\n\n            // Debounce logic so keys don't trigger multiple times\n            if (buttonPressed != lastValue[rowIndex][colIndex]) {\n                delay(DEBOUNCE_DELAY); // Wait for debounce delay\n                buttonPressed = (digitalRead(curCol) == LOW); // Read the button state again\n            }\n\n            if (buttonPressed) {\n                if (keyNotPressed(rowIndex, colIndex) || keyReleased(rowIndex, colIndex)) {\n                    keyStates[rowIndex][colIndex] = PRESSED;\n                } else {\n                    keyStates[rowIndex][colIndex] = HELD;\n                }\n            } else {\n                if (keyPressed(rowIndex, colIndex) || keyHeld(rowIndex, colIndex)) {\n                    keyStates[rowIndex][colIndex] = RELEASED;\n                } else {\n                    keyStates[rowIndex][colIndex] = NOT_PRESSED;\n                }\n            }\n\n            lastValue[rowIndex][colIndex] = buttonPressed;\n            pinMode(curCol, INPUT);\n        }\n        // disable the column\n        pinMode(curRow, INPUT);\n    }\n}\n\nvoid sendKeyInfo()\n{\n    memcpy(keyInfo, emptyData, KEY_INFO_SIZE); // clear the keyInfo array\n    for (int rowIndex = 0; rowIndex &lt; ROW_COUNT; rowIndex++) {\n        for (int colIndex = 0; colIndex &lt; COL_COUNT; colIndex++) {\n            // any key released\n            if (keyPressed(rowIndex, colIndex)) {\n                keyRepeatStart = millis(); // Set the keyRepeatStart to the current time\n                // enter\n                if (keyPressed(3, 3)) {\n                    // backlight down (alt + enter)\n                    if (keyHeld(0, 4)) {\n                        setKeyboardBrightness(FUNCTION_DOWN);\n                    }\n                    // tab (lshift + enter)\n                    else if (keyHeld(1, 6)) {\n                        keyInfo[0] = HORIZONTAL_TABULATION;\n                    }\n                    // cycle symbol backward (sym + enter)\n                    else if (keyHeld(0, 2)) {\n                        if (keymapIndex == MIN_KEYMAP_INDEX) {\n                            keymapIndex = MAX_KEYMAP_INDEX;\n                        }\n                        else {\n                            keymapIndex--;\n                        }\n                    }\n                    // enter\n                    else {\n                        keyInfo[0] = CARRIAGE_RETURN;\n                    }\n                }\n                // space\n                else if (keyPressed(0, 5)) {\n                    // alt lock (alt + space)\n                    if (keyHeld(0, 4)) {\n                        altLock = !altLock;\n                    }\n                    // ctrl lock (rshift + space)\n                    else if (keyHeld(2, 3)) {\n                        ctrlLock = !ctrlLock;\n                    }\n                    // caps lock (lshift + space)\n                    else if (keyHeld(1, 6)) {\n                        capsLock = !capsLock;\n                    }\n                    // symbol lock (sym + space)\n                    else if (keyHeld(0, 2)) {\n                        symbolLock = !symbolLock;\n                        if (keymapIndex &gt; MIN_KEYMAP_INDEX &amp;&amp; symbolLock == false) {\n                            keymapIndex = MIN_KEYMAP_INDEX;\n                        }\n                    }\n                    // space\n                    else {\n                        keyInfo[0] = 0x20;\n                    }\n                }\n                // backspace\n                else if (keyPressed(4, 3)) {\n                    // backlight up (alt + backspace)\n                    if (keyHeld(0, 4)) {\n                        setKeyboardBrightness(FUNCTION_UP);\n                    }\n                    // del (lshift + backspace)\n                    else if (keyHeld(1, 6)) {\n                        keyInfo[0] = 0x7F;\n                    }\n                    // cycle symbol forward (sym + backspace)\n                    else if (keyHeld(0, 2)) {\n                        keymapIndex++;\n                        if (keymapIndex &gt; MAX_KEYMAP_INDEX) {\n                            keymapIndex = MIN_KEYMAP_INDEX;\n                            symbolLock = false;  // reset symbol lock when all symbol keymaps have been cycled through\n                        }\n                    }\n                    // backspace\n                    else {\n                        keyInfo[0] = BACKSPACE;\n                    }\n                }\n                // mic/0\n                else if (keyPressed(0, 6)) {\n                    // mic toggle (alt + mic)\n                    if (keyHeld(0, 4)) {\n                        keyInfo[0] = FUNCTION_TOGGLE;\n                        keyInfo[5] = true;\n                    }\n                    // mic volume down (lshift + mic)\n                    else if (keyHeld(1, 6)) {\n                        keyInfo[0] = FUNCTION_DOWN;\n                        keyInfo[5] = true;\n                    }\n                    // mic volume up (rshift + mic)\n                    else if (keyHeld(2, 3)) {\n                        keyInfo[0] = FUNCTION_UP;\n                        keyInfo[5] = true;\n                    }\n                    // the below items are contained within the keymaps but appear here as well due to key combination usage\n                    // 0\n                    else if (keymapIndex == 1) {\n                        keyInfo[0] = DIGIT_ZERO;\n                    }\n                    // nbsp\n                    else if (keymapIndex == 2) {\n                        keyInfo[0] = NO_BREAK_SPACE;\n                    }\n                }\n                // $/speaker\n                else if (keyPressed(4, 4)) {\n                    // speaker toggle (alt + $)\n                    if (keyHeld(0, 4)) {\n                        keyInfo[0] = FUNCTION_TOGGLE;\n                        keyInfo[6] = true;\n                    }\n                    // speaker volume down (lshift + $)\n                    else if (keyHeld(1, 6)) {\n                        keyInfo[0] = FUNCTION_DOWN;\n                        keyInfo[6] = true;\n                    }\n                    // speaker volume up (rshift + $)\n                    else if (keyHeld(2, 3)) {\n                        keyInfo[0] = FUNCTION_UP;\n                        keyInfo[6] = true;\n                    }\n                    // the below items are contained within the keymaps but appear here as well due to key combination usage\n                    // $\n                    else if (keymapIndex == 0) {\n                        keyInfo[0] = DOLLAR_SIGN;\n                    }\n                    // \u00a2\n                    else if (keymapIndex == 1) {\n                        keyInfo[0] = CENT_SIGN;\n                    }\n                    // \u20a7\n                    else if (keymapIndex == 2) {\n                        keyInfo[0] = PESETA_SIGN;\n                    }\n                    // \u2550\n                    else if (keymapIndex == 6) {\n                        keyInfo[0] = BOX_DRAWINGS_DOUBLE_HORIZONTAL;\n                    }\n                    // EOT\n                    else if (keymapIndex == 7) {\n                        keyInfo[0] = END_OF_TRANSMISSION;\n                    }\n                    // US\n                    else if (keymapIndex == 8) {\n                        keyInfo[0] = UNIT_SEPARATOR;\n                    }\n                }\n                // rshift\n                else if (keyPressed(2, 3)) {\n                    // backlight toggle (alt + rshift)\n                    if (keyHeld(0, 4)) {\n                        setKeyboardBrightness(FUNCTION_TOGGLE);\n                    }\n                }\n                // a-z key, alt, ctrl, shift, alt lock, ctrl lock, caps lock, symbol (held)\n                else {\n                    handleCharacter(rowIndex, colIndex);\n                }\n            }\n            // a-z key (held), alt, ctrl, shift, alt lock, ctrl lock, caps lock, symbol (held)\n            else if (keyHeld(rowIndex, colIndex) &amp;&amp; (millis() - keyRepeatStart &gt; KEY_REPEAT_DELAY)) {\n                handleCharacter(rowIndex, colIndex);\n            }\n        }\n    }\n    // if keyInfo array is not empty, print the data over serial\n    if (keyInfo[0] != 0x00 || keyInfo[1] != 0x00 || keyInfo[2] != 0x00 || keyInfo[3] != 0x00 || keyInfo[4] != 0x00 || keyInfo[5] != 0x00 || keyInfo[6] != 0x00)\n    {\n        printKeyInfo(keyInfo);\n        sendDataFlag = true;\n    }\n    // if the sendDataFlag is true then copy the keyInfo array to the sendData array which gets sent by the onRequest function\n    if (sendDataFlag) {\n        memcpy(sendData, keyInfo, KEY_INFO_SIZE);\n    }\n}\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/","title":"File keyboard.hpp","text":"<p>FileList &gt; keyboard &gt; keyboard.hpp</p> <p>Go to the source code of this file</p> <p>Header file for keyboard functions and keymaps. More...</p> <ul> <li><code>#include &lt;Arduino.h&gt;</code></li> <li><code>#include &lt;Wire.h&gt;</code></li> </ul>"},{"location":"t-deck-keyboard/keyboard_8hpp/#public-types","title":"Public Types","text":"Type Name enum KeyState"},{"location":"t-deck-keyboard/keyboard_8hpp/#public-attributes","title":"Public Attributes","text":"Type Name bool altLock bool backlightState bool capsLock uint8_t cols bool ctrlLock uint8_t currentBrightness char defaultKeymap uint8_t emptyData uint8_t keyInfo unsigned long keyRepeatStart KeyState keyStates uint8_t keymapIndex bool lastValue uint8_t rows uint8_t sendData bool sendDataFlag char symbolKeymap1 char symbolKeymap2 char symbolKeymap3 char symbolKeymap4 char symbolKeymap5 char symbolKeymap6 char symbolKeymap7 bool symbolLock"},{"location":"t-deck-keyboard/keyboard_8hpp/#public-functions","title":"Public Functions","text":"Type Name void autoResetKeymapIndex () Handles resetting the keymap index. bool doesKeyExistInKeymap (int rowIndex, int colIndex, char keymap) Checks if a key exists in the keymap. void handleCharacter (int rowIndex, int colIndex) Handles the character for a specific key. bool keyHeld (int rowIndex, int colIndex) Checks if a key is being held. bool keyNotPressed (int rowIndex, int colIndex) Checks if a key is not pressed. bool keyPressed (int rowIndex, int colIndex) Checks if a key was pressed. bool keyReleased (int rowIndex, int colIndex) Checks if a key was released. void onRequest () Handles I2C requests. void printKeyInfo (uint8_t data) Prints the key information. void readKeyMatrix () Reads the key matrix and updates the key states. void sendKeyInfo () Sends the key information over I2C. void setDefaultCharacter (int rowIndex, int colIndex) Sets keyInfo to the correct character for a specific key, from the default keymap only. void setKeyboardBrightness (uint8_t command) Sets the keyboard backlight brightness. void setSymbolCharacter (int rowIndex, int colIndex) Sets keyInfo to the correct character for a specific key, from the symbol keymaps only."},{"location":"t-deck-keyboard/keyboard_8hpp/#macros","title":"Macros","text":"Type Name define COL_COUNT <code>7</code> define DEBOUNCE_DELAY <code>50</code> define FUNCTION_DOWN <code>0x02</code> define FUNCTION_TOGGLE <code>0x01</code> define FUNCTION_UP <code>0x03</code> define I2C_DEV_ADDR <code>0x55</code> define KEYBOARD_BACKLIGHT_PIN <code>9</code> define KEYBOARD_BRIGHTNESS_CH <code>0</code> define KEYBOARD_BRIGHTNESS_DEFAULT <code>119</code> define KEYBOARD_BRIGHTNESS_FREQ <code>1000</code> define KEYBOARD_BRIGHTNESS_MAX <code>255</code> define KEYBOARD_BRIGHTNESS_MIN <code>0</code> define KEYBOARD_BRIGHTNESS_RES <code>8</code> define KEYBOARD_BRIGHTNESS_STEP <code>17</code> define KEY_INFO_SIZE <code>7</code> define KEY_REPEAT_DELAY <code>200</code> define MAX_KEYMAP_INDEX <code>8</code> define MIN_KEYMAP_INDEX <code>0</code> define ROW_COUNT <code>5</code> define SCL <code>10</code> define SDA <code>2</code>"},{"location":"t-deck-keyboard/keyboard_8hpp/#detailed-description","title":"Detailed Description","text":"<p>Author:</p> <p>hreikin (hreikin@gmail.com) @license MIT </p> <p>Copyright:</p> <p>Copyright (c) 2025 hreikin (hreikin@gmail.com) </p> <p>Date:</p> <p>2025-03-07 </p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"t-deck-keyboard/keyboard_8hpp/#enum-keystate","title":"enum KeyState","text":"<pre><code>enum KeyState {\n    NOT_PRESSED,\n    PRESSED,\n    HELD,\n    RELEASED\n};\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-altlock","title":"variable altLock","text":"<pre><code>bool altLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-backlightstate","title":"variable backlightState","text":"<pre><code>bool backlightState;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-capslock","title":"variable capsLock","text":"<pre><code>bool capsLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-cols","title":"variable cols","text":"<pre><code>uint8_t cols[];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-ctrllock","title":"variable ctrlLock","text":"<pre><code>bool ctrlLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-currentbrightness","title":"variable currentBrightness","text":"<pre><code>uint8_t currentBrightness;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-defaultkeymap","title":"variable defaultKeymap","text":"<pre><code>char defaultKeymap[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-emptydata","title":"variable emptyData","text":"<pre><code>uint8_t emptyData[KEY_INFO_SIZE];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-keyinfo","title":"variable keyInfo","text":"<pre><code>uint8_t keyInfo[KEY_INFO_SIZE];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-keyrepeatstart","title":"variable keyRepeatStart","text":"<pre><code>unsigned long keyRepeatStart;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-keystates","title":"variable keyStates","text":"<pre><code>KeyState keyStates[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-keymapindex","title":"variable keymapIndex","text":"<pre><code>uint8_t keymapIndex;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-lastvalue","title":"variable lastValue","text":"<pre><code>bool lastValue[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-rows","title":"variable rows","text":"<pre><code>uint8_t rows[];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-senddata","title":"variable sendData","text":"<pre><code>uint8_t sendData[KEY_INFO_SIZE];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-senddataflag","title":"variable sendDataFlag","text":"<pre><code>bool sendDataFlag;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbolkeymap1","title":"variable symbolKeymap1","text":"<pre><code>char symbolKeymap1[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbolkeymap2","title":"variable symbolKeymap2","text":"<pre><code>char symbolKeymap2[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbolkeymap3","title":"variable symbolKeymap3","text":"<pre><code>char symbolKeymap3[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbolkeymap4","title":"variable symbolKeymap4","text":"<pre><code>char symbolKeymap4[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbolkeymap5","title":"variable symbolKeymap5","text":"<pre><code>char symbolKeymap5[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbolkeymap6","title":"variable symbolKeymap6","text":"<pre><code>char symbolKeymap6[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbolkeymap7","title":"variable symbolKeymap7","text":"<pre><code>char symbolKeymap7[ROW_COUNT][COL_COUNT];\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#variable-symbollock","title":"variable symbolLock","text":"<pre><code>bool symbolLock;\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"t-deck-keyboard/keyboard_8hpp/#function-autoresetkeymapindex","title":"function autoResetKeymapIndex","text":"<p>Handles resetting the keymap index. <pre><code>void autoResetKeymapIndex () \n</code></pre></p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-doeskeyexistinkeymap","title":"function doesKeyExistInKeymap","text":"<p>Checks if a key exists in the keymap. <pre><code>bool doesKeyExistInKeymap (\n    int rowIndex,\n    int colIndex,\n    char keymap\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> <li><code>keymap</code> The keymap to check. </li> </ul> <p>Returns:</p> <p>true if the key exists in the keymap, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-handlecharacter","title":"function handleCharacter","text":"<p>Handles the character for a specific key. <pre><code>void handleCharacter (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-keyheld","title":"function keyHeld","text":"<p>Checks if a key is being held. <pre><code>bool keyHeld (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key is being held, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-keynotpressed","title":"function keyNotPressed","text":"<p>Checks if a key is not pressed. <pre><code>bool keyNotPressed (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key is not pressed, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-keypressed","title":"function keyPressed","text":"<p>Checks if a key was pressed. <pre><code>bool keyPressed (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key was pressed, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-keyreleased","title":"function keyReleased","text":"<p>Checks if a key was released. <pre><code>bool keyReleased (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul> <p>Returns:</p> <p>true if the key was released, false otherwise. </p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-onrequest","title":"function onRequest","text":"<p>Handles I2C requests. <pre><code>void onRequest () \n</code></pre></p> <p>Sends the key data over I2C when requested. </p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-printkeyinfo","title":"function printKeyInfo","text":"<p>Prints the key information. <pre><code>void printKeyInfo (\n    uint8_t data\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> The key data array. </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-readkeymatrix","title":"function readKeyMatrix","text":"<p>Reads the key matrix and updates the key states. <pre><code>void readKeyMatrix () \n</code></pre></p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-sendkeyinfo","title":"function sendKeyInfo","text":"<p>Sends the key information over I2C. <pre><code>void sendKeyInfo () \n</code></pre></p>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-setdefaultcharacter","title":"function setDefaultCharacter","text":"<p>Sets keyInfo to the correct character for a specific key, from the default keymap only. <pre><code>void setDefaultCharacter (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key.</li> </ul> <p>Sets keyInfo to the correct character for a specific key, from the default keymap only.</p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-setkeyboardbrightness","title":"function setKeyboardBrightness","text":"<p>Sets the keyboard backlight brightness. <pre><code>void setKeyboardBrightness (\n    uint8_t command\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>command</code> The command to set the brightness (toggle, up, down). </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8hpp/#function-setsymbolcharacter","title":"function setSymbolCharacter","text":"<p>Sets keyInfo to the correct character for a specific key, from the symbol keymaps only. <pre><code>void setSymbolCharacter (\n    int rowIndex,\n    int colIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key.</li> </ul> <p>Sets keyInfo to the correct character for a specific key, from the symbol keymaps only.</p> <p>Parameters:</p> <ul> <li><code>rowIndex</code> The row index of the key. </li> <li><code>colIndex</code> The column index of the key. </li> </ul>"},{"location":"t-deck-keyboard/keyboard_8hpp/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"t-deck-keyboard/keyboard_8hpp/#define-col_count","title":"define COL_COUNT","text":"<pre><code>#define COL_COUNT `7`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-debounce_delay","title":"define DEBOUNCE_DELAY","text":"<pre><code>#define DEBOUNCE_DELAY `50`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-function_down","title":"define FUNCTION_DOWN","text":"<pre><code>#define FUNCTION_DOWN `0x02`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-function_toggle","title":"define FUNCTION_TOGGLE","text":"<pre><code>#define FUNCTION_TOGGLE `0x01`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-function_up","title":"define FUNCTION_UP","text":"<pre><code>#define FUNCTION_UP `0x03`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-i2c_dev_addr","title":"define I2C_DEV_ADDR","text":"<pre><code>#define I2C_DEV_ADDR `0x55`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_backlight_pin","title":"define KEYBOARD_BACKLIGHT_PIN","text":"<pre><code>#define KEYBOARD_BACKLIGHT_PIN `9`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_brightness_ch","title":"define KEYBOARD_BRIGHTNESS_CH","text":"<pre><code>#define KEYBOARD_BRIGHTNESS_CH `0`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_brightness_default","title":"define KEYBOARD_BRIGHTNESS_DEFAULT","text":"<pre><code>#define KEYBOARD_BRIGHTNESS_DEFAULT `119`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_brightness_freq","title":"define KEYBOARD_BRIGHTNESS_FREQ","text":"<pre><code>#define KEYBOARD_BRIGHTNESS_FREQ `1000`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_brightness_max","title":"define KEYBOARD_BRIGHTNESS_MAX","text":"<pre><code>#define KEYBOARD_BRIGHTNESS_MAX `255`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_brightness_min","title":"define KEYBOARD_BRIGHTNESS_MIN","text":"<pre><code>#define KEYBOARD_BRIGHTNESS_MIN `0`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_brightness_res","title":"define KEYBOARD_BRIGHTNESS_RES","text":"<pre><code>#define KEYBOARD_BRIGHTNESS_RES `8`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-keyboard_brightness_step","title":"define KEYBOARD_BRIGHTNESS_STEP","text":"<pre><code>#define KEYBOARD_BRIGHTNESS_STEP `17`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-key_info_size","title":"define KEY_INFO_SIZE","text":"<pre><code>#define KEY_INFO_SIZE `7`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-key_repeat_delay","title":"define KEY_REPEAT_DELAY","text":"<pre><code>#define KEY_REPEAT_DELAY `200`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-max_keymap_index","title":"define MAX_KEYMAP_INDEX","text":"<pre><code>#define MAX_KEYMAP_INDEX `8`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-min_keymap_index","title":"define MIN_KEYMAP_INDEX","text":"<pre><code>#define MIN_KEYMAP_INDEX `0`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-row_count","title":"define ROW_COUNT","text":"<pre><code>#define ROW_COUNT `5`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-scl","title":"define SCL","text":"<pre><code>#define SCL `10`\n</code></pre>"},{"location":"t-deck-keyboard/keyboard_8hpp/#define-sda","title":"define SDA","text":"<pre><code>#define SDA `2`\n</code></pre> <p>The documentation for this class was generated from the following file <code>keyboard/keyboard.hpp</code></p>"},{"location":"t-deck-keyboard/keyboard_8hpp_source/","title":"File keyboard.hpp","text":"<p>File List &gt; keyboard &gt; keyboard.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef KEYBOARD_HPP\n#define KEYBOARD_HPP\n\n#include &lt;Arduino.h&gt;\n#include &lt;Wire.h&gt;\n\n#define I2C_DEV_ADDR                        0x55\n#define KEYBOARD_BACKLIGHT_PIN              9\n#define SDA                                 2\n#define SCL                                 10\n#define KEYBOARD_BRIGHTNESS_CH              0     // ledc channel\n#define KEYBOARD_BRIGHTNESS_FREQ            1000  // ledc Frequency\n#define KEYBOARD_BRIGHTNESS_RES             8     // ledc Resolution_bits\n#define KEYBOARD_BRIGHTNESS_MAX             255\n#define KEYBOARD_BRIGHTNESS_MIN             0\n#define KEYBOARD_BRIGHTNESS_DEFAULT         119\n#define KEYBOARD_BRIGHTNESS_STEP            17\n#define FUNCTION_TOGGLE                     0x01\n#define FUNCTION_DOWN                       0x02\n#define FUNCTION_UP                         0x03\n#define DEBOUNCE_DELAY                      50    // 50 milliseconds debounce delay\n#define KEY_REPEAT_DELAY                    200   // 200 milliseconds key repeat delay\n#define MIN_KEYMAP_INDEX                    0\n#define MAX_KEYMAP_INDEX                    8\n#define ROW_COUNT                           5\n#define COL_COUNT                           7\n#define KEY_INFO_SIZE                       7\n\nenum KeyState {\n    NOT_PRESSED,\n    PRESSED,\n    HELD,\n    RELEASED\n};\n\nextern unsigned long keyRepeatStart;\nextern uint8_t currentBrightness;\nextern uint8_t rows[];\nextern uint8_t cols[];\nextern bool lastValue[ROW_COUNT][COL_COUNT];\nextern char defaultKeymap[ROW_COUNT][COL_COUNT];\nextern char symbolKeymap1[ROW_COUNT][COL_COUNT];\nextern char symbolKeymap2[ROW_COUNT][COL_COUNT];\nextern char symbolKeymap3[ROW_COUNT][COL_COUNT];\nextern char symbolKeymap4[ROW_COUNT][COL_COUNT];\nextern char symbolKeymap5[ROW_COUNT][COL_COUNT];\nextern char symbolKeymap6[ROW_COUNT][COL_COUNT];\nextern char symbolKeymap7[ROW_COUNT][COL_COUNT];\nextern KeyState keyStates[ROW_COUNT][COL_COUNT];\nextern uint8_t keymapIndex;\nextern bool altLock;\nextern bool ctrlLock;\nextern bool capsLock;\nextern bool symbolLock;\nextern bool backlightState;\nextern bool sendDataFlag;\nextern uint8_t keyInfo[KEY_INFO_SIZE];     // keyValue, alt, ctrl, shift, sym, mic, speaker\nextern uint8_t sendData[KEY_INFO_SIZE];    // keyValue, alt, ctrl, shift, sym, mic, speaker\nextern uint8_t emptyData[KEY_INFO_SIZE];   // empty array to send when no key is pressed\n\nvoid onRequest();\n\nbool keyReleased(int rowIndex, int colIndex);\n\nbool keyHeld(int rowIndex, int colIndex);\n\nbool keyPressed(int rowIndex, int colIndex);\n\nbool keyNotPressed(int rowIndex, int colIndex);\n\nbool doesKeyExistInKeymap(int rowIndex, int colIndex, char keymap[ROW_COUNT][COL_COUNT]);\n\nvoid printKeyInfo(uint8_t data[KEY_INFO_SIZE]);\n\nvoid readKeyMatrix();\n\nvoid sendKeyInfo();\n\nvoid setKeyboardBrightness(uint8_t command);\n\nvoid autoResetKeymapIndex();\n\nvoid setDefaultCharacter(int rowIndex, int colIndex);\n\nvoid setSymbolCharacter(int rowIndex, int colIndex);\n\nvoid handleCharacter(int rowIndex, int colIndex);\n\n#endif // KEYBOARD_HPP\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/","title":"File keys.hpp","text":"<p>FileList &gt; keyboard &gt; keys.hpp</p> <p>Go to the source code of this file</p> <p>Header file for keys. More...</p>"},{"location":"t-deck-keyboard/keys_8hpp/#macros","title":"Macros","text":"Type Name define ACKNOWLEDGE <code>0x06</code> define ALMOST_EQUAL_TO <code>0xF7</code> define AMPERSAND <code>0x26</code> define APOSTROPHE <code>0x27</code> define ASTERISK <code>0x2A</code> define BACKSPACE <code>0x08</code> define BELL <code>0x07</code> define BLACK_SQUARE <code>0xFE</code> define BOTTOM_HALF_INTEGRAL <code>0xF5</code> define BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL <code>0xCB</code> define BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT <code>0xBB</code> define BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT <code>0xC9</code> define BOX_DRAWINGS_DOUBLE_HORIZONTAL <code>0xCD</code> define BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL <code>0xCA</code> define BOX_DRAWINGS_DOUBLE_UP_AND_LEFT <code>0xBC</code> define BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT <code>0xC8</code> define BOX_DRAWINGS_DOUBLE_VERTICAL <code>0xBA</code> define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL <code>0xCE</code> define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT <code>0xB9</code> define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT <code>0xCC</code> define BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE <code>0xD2</code> define BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE <code>0xB7</code> define BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE <code>0xD6</code> define BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE <code>0xD1</code> define BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE <code>0xB8</code> define BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE <code>0xD5</code> define BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL <code>0xC2</code> define BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT <code>0xBF</code> define BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT <code>0xDA</code> define BOX_DRAWINGS_LIGHT_HORIZONTAL <code>0xC4</code> define BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL <code>0xC1</code> define BOX_DRAWINGS_LIGHT_UP_AND_LEFT <code>0xD9</code> define BOX_DRAWINGS_LIGHT_UP_AND_RIGHT <code>0xC0</code> define BOX_DRAWINGS_LIGHT_VERTICAL <code>0xB3</code> define BOX_DRAWINGS_LIGHT_VERTICAL_AND_HORIZONTAL <code>0xC5</code> define BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT <code>0xB4</code> define BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT <code>0xC3</code> define BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE <code>0xD0</code> define BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE <code>0xBD</code> define BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE <code>0xD3</code> define BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE <code>0xCF</code> define BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE <code>0xBE</code> define BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE <code>0xD4</code> define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE <code>0xD7</code> define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE <code>0xB6</code> define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE <code>0xC7</code> define BOX_DRAWINGS_VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE <code>0xD8</code> define BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE <code>0xB5</code> define BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE <code>0xC6</code> define BULLET_OPERATOR <code>0xF9</code> define CANCEL <code>0x18</code> define CARRIAGE_RETURN <code>0x0D</code> define CENT_SIGN <code>0x9B</code> define CIRCUMFLEX_ACCENT <code>0x5E</code> define COLON <code>0x3A</code> define COMMA <code>0x2C</code> define COMMERCIAL_AT <code>0x40</code> define DARK_SHADE <code>0xB2</code> define DATA_LINK_ESCAPE <code>0x10</code> define DEGREE_SIGN <code>0xF8</code> define DELETE <code>0x7F</code> define DEVICE_CONTROL_FOUR <code>0x14</code> define DEVICE_CONTROL_ONE <code>0x11</code> define DEVICE_CONTROL_THREE <code>0x13</code> define DEVICE_CONTROL_TWO <code>0x12</code> define DIGIT_EIGHT <code>0x38</code> define DIGIT_FIVE <code>0x35</code> define DIGIT_FOUR <code>0x34</code> define DIGIT_NINE <code>0x39</code> define DIGIT_ONE <code>0x31</code> define DIGIT_SEVEN <code>0x37</code> define DIGIT_SIX <code>0x36</code> define DIGIT_THREE <code>0x33</code> define DIGIT_TWO <code>0x32</code> define DIGIT_ZERO <code>0x30</code> define DIVISION_SIGN <code>0xF6</code> define DOLLAR_SIGN <code>0x24</code> define END_OF_MEDIUM <code>0x19</code> define END_OF_TEXT <code>0x03</code> define END_OF_TRANSMISSION <code>0x04</code> define END_OF_TRANSMISSION_BLOCK <code>0x17</code> define ENQUIRY <code>0x05</code> define EQUALS_SIGN <code>0x3D</code> define ESCAPE <code>0x1B</code> define EXCLAMATION_MARK <code>0x21</code> define FEMININE_ORDINAL_INDICATOR <code>0xA6</code> define FILE_SEPARATOR <code>0x1C</code> define FORM_FEED <code>0x0C</code> define FULL_BLOCK <code>0xDB</code> define FULL_STOP <code>0x2E</code> define GRAVE_ACCENT <code>0x60</code> define GREATER_THAN_OR_EQUAL_TO <code>0xF2</code> define GREATER_THAN_SIGN <code>0x3E</code> define GREEK_CAPITAL_LETTER_GAMMA <code>0xE2</code> define GREEK_CAPITAL_LETTER_OMEGA <code>0xEA</code> define GREEK_CAPITAL_LETTER_PHI <code>0xE8</code> define GREEK_CAPITAL_LETTER_SIGMA <code>0xE4</code> define GREEK_CAPITAL_LETTER_THETA <code>0xE9</code> define GREEK_SMALL_LETTER_ALPHA <code>0xE0</code> define GREEK_SMALL_LETTER_DELTA <code>0xEB</code> define GREEK_SMALL_LETTER_EPSILON <code>0xEE</code> define GREEK_SMALL_LETTER_PHI <code>0xED</code> define GREEK_SMALL_LETTER_PI <code>0xE3</code> define GREEK_SMALL_LETTER_SIGMA <code>0xE5</code> define GREEK_SMALL_LETTER_TAU <code>0xE7</code> define GROUP_SEPARATOR <code>0x1D</code> define HORIZONTAL_TABULATION <code>0x09</code> define HYPHEN_MINUS <code>0x2D</code> define IDENTICAL_TO <code>0xF0</code> define INFINITY <code>0xEC</code> define INTERSECTION <code>0xEF</code> define INVERTED_EXCLAMATION_MARK <code>0xAD</code> define INVERTED_QUESTION_MARK <code>0xA8</code> define LATIN_CAPITAL_LETTER_A <code>0x41</code> define LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS <code>0x8E</code> define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE <code>0x8F</code> define LATIN_CAPITAL_LETTER_B <code>0x42</code> define LATIN_CAPITAL_LETTER_C <code>0x43</code> define LATIN_CAPITAL_LETTER_C_WITH_CEDILLA <code>0x80</code> define LATIN_CAPITAL_LETTER_D <code>0x44</code> define LATIN_CAPITAL_LETTER_E <code>0x45</code> define LATIN_CAPITAL_LETTER_E_WITH_ACUTE <code>0x90</code> define LATIN_CAPITAL_LETTER_F <code>0x46</code> define LATIN_CAPITAL_LETTER_G <code>0x47</code> define LATIN_CAPITAL_LETTER_H <code>0x48</code> define LATIN_CAPITAL_LETTER_I <code>0x49</code> define LATIN_CAPITAL_LETTER_J <code>0x4A</code> define LATIN_CAPITAL_LETTER_K <code>0x4B</code> define LATIN_CAPITAL_LETTER_L <code>0x4C</code> define LATIN_CAPITAL_LETTER_M <code>0x4D</code> define LATIN_CAPITAL_LETTER_N <code>0x4E</code> define LATIN_CAPITAL_LETTER_N_WITH_TILDE <code>0xA5</code> define LATIN_CAPITAL_LETTER_O <code>0x4F</code> define LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS <code>0x99</code> define LATIN_CAPITAL_LETTER_P <code>0x50</code> define LATIN_CAPITAL_LETTER_Q <code>0x51</code> define LATIN_CAPITAL_LETTER_R <code>0x52</code> define LATIN_CAPITAL_LETTER_S <code>0x53</code> define LATIN_CAPITAL_LETTER_T <code>0x54</code> define LATIN_CAPITAL_LETTER_U <code>0x55</code> define LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS <code>0x9A</code> define LATIN_CAPITAL_LETTER_V <code>0x56</code> define LATIN_CAPITAL_LETTER_W <code>0x57</code> define LATIN_CAPITAL_LETTER_X <code>0x58</code> define LATIN_CAPITAL_LETTER_Y <code>0x59</code> define LATIN_CAPITAL_LETTER_Z <code>0x5A</code> define LATIN_CAPITAL_LIGATURE_AE <code>0x92</code> define LATIN_SMALL_LETTER_A <code>0x61</code> define LATIN_SMALL_LETTER_A_WITH_ACUTE <code>0xA0</code> define LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX <code>0x83</code> define LATIN_SMALL_LETTER_A_WITH_DIAERESIS <code>0x84</code> define LATIN_SMALL_LETTER_A_WITH_GRAVE <code>0x85</code> define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE <code>0x86</code> define LATIN_SMALL_LETTER_B <code>0x62</code> define LATIN_SMALL_LETTER_C <code>0x63</code> define LATIN_SMALL_LETTER_C_WITH_CEDILLA <code>0x87</code> define LATIN_SMALL_LETTER_D <code>0x64</code> define LATIN_SMALL_LETTER_E <code>0x65</code> define LATIN_SMALL_LETTER_E_WITH_ACUTE <code>0x82</code> define LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX <code>0x88</code> define LATIN_SMALL_LETTER_E_WITH_DIAERESIS <code>0x89</code> define LATIN_SMALL_LETTER_E_WITH_GRAVE <code>0x8A</code> define LATIN_SMALL_LETTER_F <code>0x66</code> define LATIN_SMALL_LETTER_F_WITH_HOOK <code>0x9F</code> define LATIN_SMALL_LETTER_G <code>0x67</code> define LATIN_SMALL_LETTER_H <code>0x68</code> define LATIN_SMALL_LETTER_I <code>0x69</code> define LATIN_SMALL_LETTER_I_WITH_ACUTE <code>0xA1</code> define LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX <code>0x8C</code> define LATIN_SMALL_LETTER_I_WITH_DIAERESIS <code>0x8B</code> define LATIN_SMALL_LETTER_I_WITH_GRAVE <code>0x8D</code> define LATIN_SMALL_LETTER_J <code>0x6A</code> define LATIN_SMALL_LETTER_K <code>0x6B</code> define LATIN_SMALL_LETTER_L <code>0x6C</code> define LATIN_SMALL_LETTER_M <code>0x6D</code> define LATIN_SMALL_LETTER_N <code>0x6E</code> define LATIN_SMALL_LETTER_N_WITH_TILDE <code>0xA4</code> define LATIN_SMALL_LETTER_O <code>0x6F</code> define LATIN_SMALL_LETTER_O_WITH_ACUTE <code>0xA2</code> define LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX <code>0x93</code> define LATIN_SMALL_LETTER_O_WITH_DIAERESIS <code>0x94</code> define LATIN_SMALL_LETTER_O_WITH_GRAVE <code>0x95</code> define LATIN_SMALL_LETTER_P <code>0x70</code> define LATIN_SMALL_LETTER_Q <code>0x71</code> define LATIN_SMALL_LETTER_R <code>0x72</code> define LATIN_SMALL_LETTER_S <code>0x73</code> define LATIN_SMALL_LETTER_SHARP_S <code>0xE1</code> define LATIN_SMALL_LETTER_T <code>0x74</code> define LATIN_SMALL_LETTER_U <code>0x75</code> define LATIN_SMALL_LETTER_U_WITH_ACUTE <code>0xA3</code> define LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX <code>0x96</code> define LATIN_SMALL_LETTER_U_WITH_DIAERESIS <code>0x81</code> define LATIN_SMALL_LETTER_U_WITH_GRAVE <code>0x97</code> define LATIN_SMALL_LETTER_V <code>0x76</code> define LATIN_SMALL_LETTER_W <code>0x77</code> define LATIN_SMALL_LETTER_X <code>0x78</code> define LATIN_SMALL_LETTER_Y <code>0x79</code> define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS <code>0x98</code> define LATIN_SMALL_LETTER_Z <code>0x7A</code> define LATIN_SMALL_LIGATURE_AE <code>0x91</code> define LEFT_CURLY_BRACKET <code>0x7B</code> define LEFT_HALF_BLOCK <code>0xDD</code> define LEFT_PARENTHESIS <code>0x28</code> define LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK <code>0xAE</code> define LEFT_SQUARE_BRACKET <code>0x5B</code> define LESS_THAN_OR_EQUAL_TO <code>0xF3</code> define LESS_THAN_SIGN <code>0x3C</code> define LIGHT_SHADE <code>0xB0</code> define LINE_FEED <code>0x0A</code> define LOWER_HALF_BLOCK <code>0xDC</code> define LOW_LINE <code>0x5F</code> define MASCULINE_ORDINAL_INDICATOR <code>0xA7</code> define MEDIUM_SHADE <code>0xB1</code> define MICRO_SIGN <code>0xE6</code> define MIDDLE_DOT <code>0xFA</code> define NEGATIVE_ACKNOWLEDGE <code>0x15</code> define NOT_SIGN <code>0xAA</code> define NO_BREAK_SPACE <code>0xFF</code> define NUL_CHAR <code>0x00</code> define NUMBER_SIGN <code>0x23</code> define PERCENT_SIGN <code>0x25</code> define PESETA_SIGN <code>0x9E</code> define PLUS_MINUS_SIGN <code>0xF1</code> define PLUS_SIGN <code>0x2B</code> define POUND_SIGN <code>0x9C</code> define QUESTION_MARK <code>0x3F</code> define QUOTATION_MARK <code>0x22</code> define RECORD_SEPARATOR <code>0x1E</code> define REVERSED_NOT_SIGN <code>0xA9</code> define REVERSE_SOLIDUS <code>0x5C</code> define RIGHT_CURLY_BRACKET <code>0x7D</code> define RIGHT_HALF_BLOCK <code>0xDE</code> define RIGHT_PARENTHESIS <code>0x29</code> define RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK <code>0xAF</code> define RIGHT_SQUARE_BRACKET <code>0x5D</code> define SEMICOLON <code>0x3B</code> define SHIFT_IN <code>0x0F</code> define SHIFT_OUT <code>0x0E</code> define SOLIDUS <code>0x2F</code> define SPACE <code>0x20</code> define SQUARE_ROOT <code>0xFB</code> define START_OF_HEADING <code>0x01</code> define START_OF_TEXT <code>0x02</code> define SUBSTITUTE <code>0x1A</code> define SUPERSCRIPT_LATIN_SMALL_LETTER_N <code>0xFC</code> define SUPERSCRIPT_TWO <code>0xFD</code> define SYNCHRONOUS_IDLE <code>0x16</code> define TILDE <code>0x7E</code> define TOP_HALF_INTEGRAL <code>0xF4</code> define UNIT_SEPARATOR <code>0x1F</code> define UPPER_HALF_BLOCK <code>0xDF</code> define VERTICAL_LINE <code>0x7C</code> define VERTICAL_TABULATION <code>0x0B</code> define VULGAR_FRACTION_ONE_HALF <code>0xAB</code> define VULGAR_FRACTION_ONE_QUARTER <code>0xAC</code> define YEN_SIGN <code>0x9D</code>"},{"location":"t-deck-keyboard/keys_8hpp/#detailed-description","title":"Detailed Description","text":"<p>Author:</p> <p>hreikin (hreikin@gmail.com) @license MIT </p> <p>Copyright:</p> <p>Copyright (c) 2025 hreikin (hreikin@gmail.com) </p> <p>Date:</p> <p>2025-03-15 </p>"},{"location":"t-deck-keyboard/keys_8hpp/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"t-deck-keyboard/keys_8hpp/#define-acknowledge","title":"define ACKNOWLEDGE","text":"<pre><code>#define ACKNOWLEDGE `0x06`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-almost_equal_to","title":"define ALMOST_EQUAL_TO","text":"<pre><code>#define ALMOST_EQUAL_TO `0xF7`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-ampersand","title":"define AMPERSAND","text":"<pre><code>#define AMPERSAND `0x26`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-apostrophe","title":"define APOSTROPHE","text":"<pre><code>#define APOSTROPHE `0x27`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-asterisk","title":"define ASTERISK","text":"<pre><code>#define ASTERISK `0x2A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-backspace","title":"define BACKSPACE","text":"<pre><code>#define BACKSPACE `0x08`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-bell","title":"define BELL","text":"<pre><code>#define BELL `0x07`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-black_square","title":"define BLACK_SQUARE","text":"<pre><code>#define BLACK_SQUARE `0xFE`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-bottom_half_integral","title":"define BOTTOM_HALF_INTEGRAL","text":"<pre><code>#define BOTTOM_HALF_INTEGRAL `0xF5`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_down_and_horizontal","title":"define BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL `0xCB`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_down_and_left","title":"define BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT `0xBB`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_down_and_right","title":"define BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT `0xC9`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_horizontal","title":"define BOX_DRAWINGS_DOUBLE_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_HORIZONTAL `0xCD`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_up_and_horizontal","title":"define BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL `0xCA`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_up_and_left","title":"define BOX_DRAWINGS_DOUBLE_UP_AND_LEFT","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_UP_AND_LEFT `0xBC`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_up_and_right","title":"define BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT `0xC8`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_vertical","title":"define BOX_DRAWINGS_DOUBLE_VERTICAL","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_VERTICAL `0xBA`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_vertical_and_horizontal","title":"define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL `0xCE`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_vertical_and_left","title":"define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT `0xB9`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_double_vertical_and_right","title":"define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT","text":"<pre><code>#define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT `0xCC`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_down_double_and_horizontal_single","title":"define BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE `0xD2`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_down_double_and_left_single","title":"define BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE `0xB7`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_down_double_and_right_single","title":"define BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE `0xD6`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_down_single_and_horizontal_double","title":"define BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE `0xD1`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_down_single_and_left_double","title":"define BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE `0xB8`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_down_single_and_right_double","title":"define BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE `0xD5`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_down_and_horizontal","title":"define BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL `0xC2`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_down_and_left","title":"define BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT `0xBF`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_down_and_right","title":"define BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT `0xDA`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_horizontal","title":"define BOX_DRAWINGS_LIGHT_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_HORIZONTAL `0xC4`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_up_and_horizontal","title":"define BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL `0xC1`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_up_and_left","title":"define BOX_DRAWINGS_LIGHT_UP_AND_LEFT","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_UP_AND_LEFT `0xD9`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_up_and_right","title":"define BOX_DRAWINGS_LIGHT_UP_AND_RIGHT","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_UP_AND_RIGHT `0xC0`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_vertical","title":"define BOX_DRAWINGS_LIGHT_VERTICAL","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_VERTICAL `0xB3`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_vertical_and_horizontal","title":"define BOX_DRAWINGS_LIGHT_VERTICAL_AND_HORIZONTAL","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_VERTICAL_AND_HORIZONTAL `0xC5`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_vertical_and_left","title":"define BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT `0xB4`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_light_vertical_and_right","title":"define BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT","text":"<pre><code>#define BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT `0xC3`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_up_double_and_horizontal_single","title":"define BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE `0xD0`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_up_double_and_left_single","title":"define BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE `0xBD`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_up_double_and_right_single","title":"define BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE `0xD3`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_up_single_and_horizontal_double","title":"define BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE `0xCF`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_up_single_and_left_double","title":"define BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE `0xBE`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_up_single_and_right_double","title":"define BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE `0xD4`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_vertical_double_and_horizontal_single","title":"define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE `0xD7`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_vertical_double_and_left_single","title":"define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE `0xB6`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_vertical_double_and_right_single","title":"define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE","text":"<pre><code>#define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE `0xC7`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_vertical_single_and_horizontal_double","title":"define BOX_DRAWINGS_VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE `0xD8`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_vertical_single_and_left_double","title":"define BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE `0xB5`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-box_drawings_vertical_single_and_right_double","title":"define BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE","text":"<pre><code>#define BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE `0xC6`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-bullet_operator","title":"define BULLET_OPERATOR","text":"<pre><code>#define BULLET_OPERATOR `0xF9`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-cancel","title":"define CANCEL","text":"<pre><code>#define CANCEL `0x18`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-carriage_return","title":"define CARRIAGE_RETURN","text":"<pre><code>#define CARRIAGE_RETURN `0x0D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-cent_sign","title":"define CENT_SIGN","text":"<pre><code>#define CENT_SIGN `0x9B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-circumflex_accent","title":"define CIRCUMFLEX_ACCENT","text":"<pre><code>#define CIRCUMFLEX_ACCENT `0x5E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-colon","title":"define COLON","text":"<pre><code>#define COLON `0x3A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-comma","title":"define COMMA","text":"<pre><code>#define COMMA `0x2C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-commercial_at","title":"define COMMERCIAL_AT","text":"<pre><code>#define COMMERCIAL_AT `0x40`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-dark_shade","title":"define DARK_SHADE","text":"<pre><code>#define DARK_SHADE `0xB2`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-data_link_escape","title":"define DATA_LINK_ESCAPE","text":"<pre><code>#define DATA_LINK_ESCAPE `0x10`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-degree_sign","title":"define DEGREE_SIGN","text":"<pre><code>#define DEGREE_SIGN `0xF8`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-delete","title":"define DELETE","text":"<pre><code>#define DELETE `0x7F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-device_control_four","title":"define DEVICE_CONTROL_FOUR","text":"<pre><code>#define DEVICE_CONTROL_FOUR `0x14`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-device_control_one","title":"define DEVICE_CONTROL_ONE","text":"<pre><code>#define DEVICE_CONTROL_ONE `0x11`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-device_control_three","title":"define DEVICE_CONTROL_THREE","text":"<pre><code>#define DEVICE_CONTROL_THREE `0x13`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-device_control_two","title":"define DEVICE_CONTROL_TWO","text":"<pre><code>#define DEVICE_CONTROL_TWO `0x12`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_eight","title":"define DIGIT_EIGHT","text":"<pre><code>#define DIGIT_EIGHT `0x38`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_five","title":"define DIGIT_FIVE","text":"<pre><code>#define DIGIT_FIVE `0x35`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_four","title":"define DIGIT_FOUR","text":"<pre><code>#define DIGIT_FOUR `0x34`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_nine","title":"define DIGIT_NINE","text":"<pre><code>#define DIGIT_NINE `0x39`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_one","title":"define DIGIT_ONE","text":"<pre><code>#define DIGIT_ONE `0x31`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_seven","title":"define DIGIT_SEVEN","text":"<pre><code>#define DIGIT_SEVEN `0x37`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_six","title":"define DIGIT_SIX","text":"<pre><code>#define DIGIT_SIX `0x36`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_three","title":"define DIGIT_THREE","text":"<pre><code>#define DIGIT_THREE `0x33`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_two","title":"define DIGIT_TWO","text":"<pre><code>#define DIGIT_TWO `0x32`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-digit_zero","title":"define DIGIT_ZERO","text":"<pre><code>#define DIGIT_ZERO `0x30`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-division_sign","title":"define DIVISION_SIGN","text":"<pre><code>#define DIVISION_SIGN `0xF6`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-dollar_sign","title":"define DOLLAR_SIGN","text":"<pre><code>#define DOLLAR_SIGN `0x24`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-end_of_medium","title":"define END_OF_MEDIUM","text":"<pre><code>#define END_OF_MEDIUM `0x19`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-end_of_text","title":"define END_OF_TEXT","text":"<pre><code>#define END_OF_TEXT `0x03`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-end_of_transmission","title":"define END_OF_TRANSMISSION","text":"<pre><code>#define END_OF_TRANSMISSION `0x04`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-end_of_transmission_block","title":"define END_OF_TRANSMISSION_BLOCK","text":"<pre><code>#define END_OF_TRANSMISSION_BLOCK `0x17`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-enquiry","title":"define ENQUIRY","text":"<pre><code>#define ENQUIRY `0x05`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-equals_sign","title":"define EQUALS_SIGN","text":"<pre><code>#define EQUALS_SIGN `0x3D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-escape","title":"define ESCAPE","text":"<pre><code>#define ESCAPE `0x1B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-exclamation_mark","title":"define EXCLAMATION_MARK","text":"<pre><code>#define EXCLAMATION_MARK `0x21`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-feminine_ordinal_indicator","title":"define FEMININE_ORDINAL_INDICATOR","text":"<pre><code>#define FEMININE_ORDINAL_INDICATOR `0xA6`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-file_separator","title":"define FILE_SEPARATOR","text":"<pre><code>#define FILE_SEPARATOR `0x1C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-form_feed","title":"define FORM_FEED","text":"<pre><code>#define FORM_FEED `0x0C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-full_block","title":"define FULL_BLOCK","text":"<pre><code>#define FULL_BLOCK `0xDB`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-full_stop","title":"define FULL_STOP","text":"<pre><code>#define FULL_STOP `0x2E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-grave_accent","title":"define GRAVE_ACCENT","text":"<pre><code>#define GRAVE_ACCENT `0x60`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greater_than_or_equal_to","title":"define GREATER_THAN_OR_EQUAL_TO","text":"<pre><code>#define GREATER_THAN_OR_EQUAL_TO `0xF2`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greater_than_sign","title":"define GREATER_THAN_SIGN","text":"<pre><code>#define GREATER_THAN_SIGN `0x3E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_capital_letter_gamma","title":"define GREEK_CAPITAL_LETTER_GAMMA","text":"<pre><code>#define GREEK_CAPITAL_LETTER_GAMMA `0xE2`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_capital_letter_omega","title":"define GREEK_CAPITAL_LETTER_OMEGA","text":"<pre><code>#define GREEK_CAPITAL_LETTER_OMEGA `0xEA`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_capital_letter_phi","title":"define GREEK_CAPITAL_LETTER_PHI","text":"<pre><code>#define GREEK_CAPITAL_LETTER_PHI `0xE8`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_capital_letter_sigma","title":"define GREEK_CAPITAL_LETTER_SIGMA","text":"<pre><code>#define GREEK_CAPITAL_LETTER_SIGMA `0xE4`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_capital_letter_theta","title":"define GREEK_CAPITAL_LETTER_THETA","text":"<pre><code>#define GREEK_CAPITAL_LETTER_THETA `0xE9`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_small_letter_alpha","title":"define GREEK_SMALL_LETTER_ALPHA","text":"<pre><code>#define GREEK_SMALL_LETTER_ALPHA `0xE0`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_small_letter_delta","title":"define GREEK_SMALL_LETTER_DELTA","text":"<pre><code>#define GREEK_SMALL_LETTER_DELTA `0xEB`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_small_letter_epsilon","title":"define GREEK_SMALL_LETTER_EPSILON","text":"<pre><code>#define GREEK_SMALL_LETTER_EPSILON `0xEE`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_small_letter_phi","title":"define GREEK_SMALL_LETTER_PHI","text":"<pre><code>#define GREEK_SMALL_LETTER_PHI `0xED`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_small_letter_pi","title":"define GREEK_SMALL_LETTER_PI","text":"<pre><code>#define GREEK_SMALL_LETTER_PI `0xE3`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_small_letter_sigma","title":"define GREEK_SMALL_LETTER_SIGMA","text":"<pre><code>#define GREEK_SMALL_LETTER_SIGMA `0xE5`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-greek_small_letter_tau","title":"define GREEK_SMALL_LETTER_TAU","text":"<pre><code>#define GREEK_SMALL_LETTER_TAU `0xE7`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-group_separator","title":"define GROUP_SEPARATOR","text":"<pre><code>#define GROUP_SEPARATOR `0x1D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-horizontal_tabulation","title":"define HORIZONTAL_TABULATION","text":"<pre><code>#define HORIZONTAL_TABULATION `0x09`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-hyphen_minus","title":"define HYPHEN_MINUS","text":"<pre><code>#define HYPHEN_MINUS `0x2D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-identical_to","title":"define IDENTICAL_TO","text":"<pre><code>#define IDENTICAL_TO `0xF0`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-infinity","title":"define INFINITY","text":"<pre><code>#define INFINITY `0xEC`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-intersection","title":"define INTERSECTION","text":"<pre><code>#define INTERSECTION `0xEF`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-inverted_exclamation_mark","title":"define INVERTED_EXCLAMATION_MARK","text":"<pre><code>#define INVERTED_EXCLAMATION_MARK `0xAD`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-inverted_question_mark","title":"define INVERTED_QUESTION_MARK","text":"<pre><code>#define INVERTED_QUESTION_MARK `0xA8`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_a","title":"define LATIN_CAPITAL_LETTER_A","text":"<pre><code>#define LATIN_CAPITAL_LETTER_A `0x41`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_a_with_diaeresis","title":"define LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS","text":"<pre><code>#define LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS `0x8E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_a_with_ring_above","title":"define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE","text":"<pre><code>#define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE `0x8F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_b","title":"define LATIN_CAPITAL_LETTER_B","text":"<pre><code>#define LATIN_CAPITAL_LETTER_B `0x42`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_c","title":"define LATIN_CAPITAL_LETTER_C","text":"<pre><code>#define LATIN_CAPITAL_LETTER_C `0x43`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_c_with_cedilla","title":"define LATIN_CAPITAL_LETTER_C_WITH_CEDILLA","text":"<pre><code>#define LATIN_CAPITAL_LETTER_C_WITH_CEDILLA `0x80`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_d","title":"define LATIN_CAPITAL_LETTER_D","text":"<pre><code>#define LATIN_CAPITAL_LETTER_D `0x44`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_e","title":"define LATIN_CAPITAL_LETTER_E","text":"<pre><code>#define LATIN_CAPITAL_LETTER_E `0x45`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_e_with_acute","title":"define LATIN_CAPITAL_LETTER_E_WITH_ACUTE","text":"<pre><code>#define LATIN_CAPITAL_LETTER_E_WITH_ACUTE `0x90`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_f","title":"define LATIN_CAPITAL_LETTER_F","text":"<pre><code>#define LATIN_CAPITAL_LETTER_F `0x46`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_g","title":"define LATIN_CAPITAL_LETTER_G","text":"<pre><code>#define LATIN_CAPITAL_LETTER_G `0x47`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_h","title":"define LATIN_CAPITAL_LETTER_H","text":"<pre><code>#define LATIN_CAPITAL_LETTER_H `0x48`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_i","title":"define LATIN_CAPITAL_LETTER_I","text":"<pre><code>#define LATIN_CAPITAL_LETTER_I `0x49`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_j","title":"define LATIN_CAPITAL_LETTER_J","text":"<pre><code>#define LATIN_CAPITAL_LETTER_J `0x4A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_k","title":"define LATIN_CAPITAL_LETTER_K","text":"<pre><code>#define LATIN_CAPITAL_LETTER_K `0x4B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_l","title":"define LATIN_CAPITAL_LETTER_L","text":"<pre><code>#define LATIN_CAPITAL_LETTER_L `0x4C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_m","title":"define LATIN_CAPITAL_LETTER_M","text":"<pre><code>#define LATIN_CAPITAL_LETTER_M `0x4D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_n","title":"define LATIN_CAPITAL_LETTER_N","text":"<pre><code>#define LATIN_CAPITAL_LETTER_N `0x4E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_n_with_tilde","title":"define LATIN_CAPITAL_LETTER_N_WITH_TILDE","text":"<pre><code>#define LATIN_CAPITAL_LETTER_N_WITH_TILDE `0xA5`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_o","title":"define LATIN_CAPITAL_LETTER_O","text":"<pre><code>#define LATIN_CAPITAL_LETTER_O `0x4F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_o_with_diaeresis","title":"define LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS","text":"<pre><code>#define LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS `0x99`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_p","title":"define LATIN_CAPITAL_LETTER_P","text":"<pre><code>#define LATIN_CAPITAL_LETTER_P `0x50`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_q","title":"define LATIN_CAPITAL_LETTER_Q","text":"<pre><code>#define LATIN_CAPITAL_LETTER_Q `0x51`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_r","title":"define LATIN_CAPITAL_LETTER_R","text":"<pre><code>#define LATIN_CAPITAL_LETTER_R `0x52`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_s","title":"define LATIN_CAPITAL_LETTER_S","text":"<pre><code>#define LATIN_CAPITAL_LETTER_S `0x53`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_t","title":"define LATIN_CAPITAL_LETTER_T","text":"<pre><code>#define LATIN_CAPITAL_LETTER_T `0x54`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_u","title":"define LATIN_CAPITAL_LETTER_U","text":"<pre><code>#define LATIN_CAPITAL_LETTER_U `0x55`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_u_with_diaeresis","title":"define LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS","text":"<pre><code>#define LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS `0x9A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_v","title":"define LATIN_CAPITAL_LETTER_V","text":"<pre><code>#define LATIN_CAPITAL_LETTER_V `0x56`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_w","title":"define LATIN_CAPITAL_LETTER_W","text":"<pre><code>#define LATIN_CAPITAL_LETTER_W `0x57`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_x","title":"define LATIN_CAPITAL_LETTER_X","text":"<pre><code>#define LATIN_CAPITAL_LETTER_X `0x58`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_y","title":"define LATIN_CAPITAL_LETTER_Y","text":"<pre><code>#define LATIN_CAPITAL_LETTER_Y `0x59`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_letter_z","title":"define LATIN_CAPITAL_LETTER_Z","text":"<pre><code>#define LATIN_CAPITAL_LETTER_Z `0x5A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_capital_ligature_ae","title":"define LATIN_CAPITAL_LIGATURE_AE","text":"<pre><code>#define LATIN_CAPITAL_LIGATURE_AE `0x92`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_a","title":"define LATIN_SMALL_LETTER_A","text":"<pre><code>#define LATIN_SMALL_LETTER_A `0x61`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_a_with_acute","title":"define LATIN_SMALL_LETTER_A_WITH_ACUTE","text":"<pre><code>#define LATIN_SMALL_LETTER_A_WITH_ACUTE `0xA0`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_a_with_circumflex","title":"define LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX","text":"<pre><code>#define LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX `0x83`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_a_with_diaeresis","title":"define LATIN_SMALL_LETTER_A_WITH_DIAERESIS","text":"<pre><code>#define LATIN_SMALL_LETTER_A_WITH_DIAERESIS `0x84`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_a_with_grave","title":"define LATIN_SMALL_LETTER_A_WITH_GRAVE","text":"<pre><code>#define LATIN_SMALL_LETTER_A_WITH_GRAVE `0x85`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_a_with_ring_above","title":"define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE","text":"<pre><code>#define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE `0x86`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_b","title":"define LATIN_SMALL_LETTER_B","text":"<pre><code>#define LATIN_SMALL_LETTER_B `0x62`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_c","title":"define LATIN_SMALL_LETTER_C","text":"<pre><code>#define LATIN_SMALL_LETTER_C `0x63`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_c_with_cedilla","title":"define LATIN_SMALL_LETTER_C_WITH_CEDILLA","text":"<pre><code>#define LATIN_SMALL_LETTER_C_WITH_CEDILLA `0x87`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_d","title":"define LATIN_SMALL_LETTER_D","text":"<pre><code>#define LATIN_SMALL_LETTER_D `0x64`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_e","title":"define LATIN_SMALL_LETTER_E","text":"<pre><code>#define LATIN_SMALL_LETTER_E `0x65`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_e_with_acute","title":"define LATIN_SMALL_LETTER_E_WITH_ACUTE","text":"<pre><code>#define LATIN_SMALL_LETTER_E_WITH_ACUTE `0x82`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_e_with_circumflex","title":"define LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX","text":"<pre><code>#define LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX `0x88`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_e_with_diaeresis","title":"define LATIN_SMALL_LETTER_E_WITH_DIAERESIS","text":"<pre><code>#define LATIN_SMALL_LETTER_E_WITH_DIAERESIS `0x89`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_e_with_grave","title":"define LATIN_SMALL_LETTER_E_WITH_GRAVE","text":"<pre><code>#define LATIN_SMALL_LETTER_E_WITH_GRAVE `0x8A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_f","title":"define LATIN_SMALL_LETTER_F","text":"<pre><code>#define LATIN_SMALL_LETTER_F `0x66`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_f_with_hook","title":"define LATIN_SMALL_LETTER_F_WITH_HOOK","text":"<pre><code>#define LATIN_SMALL_LETTER_F_WITH_HOOK `0x9F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_g","title":"define LATIN_SMALL_LETTER_G","text":"<pre><code>#define LATIN_SMALL_LETTER_G `0x67`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_h","title":"define LATIN_SMALL_LETTER_H","text":"<pre><code>#define LATIN_SMALL_LETTER_H `0x68`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_i","title":"define LATIN_SMALL_LETTER_I","text":"<pre><code>#define LATIN_SMALL_LETTER_I `0x69`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_i_with_acute","title":"define LATIN_SMALL_LETTER_I_WITH_ACUTE","text":"<pre><code>#define LATIN_SMALL_LETTER_I_WITH_ACUTE `0xA1`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_i_with_circumflex","title":"define LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX","text":"<pre><code>#define LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX `0x8C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_i_with_diaeresis","title":"define LATIN_SMALL_LETTER_I_WITH_DIAERESIS","text":"<pre><code>#define LATIN_SMALL_LETTER_I_WITH_DIAERESIS `0x8B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_i_with_grave","title":"define LATIN_SMALL_LETTER_I_WITH_GRAVE","text":"<pre><code>#define LATIN_SMALL_LETTER_I_WITH_GRAVE `0x8D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_j","title":"define LATIN_SMALL_LETTER_J","text":"<pre><code>#define LATIN_SMALL_LETTER_J `0x6A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_k","title":"define LATIN_SMALL_LETTER_K","text":"<pre><code>#define LATIN_SMALL_LETTER_K `0x6B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_l","title":"define LATIN_SMALL_LETTER_L","text":"<pre><code>#define LATIN_SMALL_LETTER_L `0x6C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_m","title":"define LATIN_SMALL_LETTER_M","text":"<pre><code>#define LATIN_SMALL_LETTER_M `0x6D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_n","title":"define LATIN_SMALL_LETTER_N","text":"<pre><code>#define LATIN_SMALL_LETTER_N `0x6E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_n_with_tilde","title":"define LATIN_SMALL_LETTER_N_WITH_TILDE","text":"<pre><code>#define LATIN_SMALL_LETTER_N_WITH_TILDE `0xA4`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_o","title":"define LATIN_SMALL_LETTER_O","text":"<pre><code>#define LATIN_SMALL_LETTER_O `0x6F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_o_with_acute","title":"define LATIN_SMALL_LETTER_O_WITH_ACUTE","text":"<pre><code>#define LATIN_SMALL_LETTER_O_WITH_ACUTE `0xA2`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_o_with_circumflex","title":"define LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX","text":"<pre><code>#define LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX `0x93`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_o_with_diaeresis","title":"define LATIN_SMALL_LETTER_O_WITH_DIAERESIS","text":"<pre><code>#define LATIN_SMALL_LETTER_O_WITH_DIAERESIS `0x94`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_o_with_grave","title":"define LATIN_SMALL_LETTER_O_WITH_GRAVE","text":"<pre><code>#define LATIN_SMALL_LETTER_O_WITH_GRAVE `0x95`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_p","title":"define LATIN_SMALL_LETTER_P","text":"<pre><code>#define LATIN_SMALL_LETTER_P `0x70`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_q","title":"define LATIN_SMALL_LETTER_Q","text":"<pre><code>#define LATIN_SMALL_LETTER_Q `0x71`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_r","title":"define LATIN_SMALL_LETTER_R","text":"<pre><code>#define LATIN_SMALL_LETTER_R `0x72`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_s","title":"define LATIN_SMALL_LETTER_S","text":"<pre><code>#define LATIN_SMALL_LETTER_S `0x73`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_sharp_s","title":"define LATIN_SMALL_LETTER_SHARP_S","text":"<pre><code>#define LATIN_SMALL_LETTER_SHARP_S `0xE1`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_t","title":"define LATIN_SMALL_LETTER_T","text":"<pre><code>#define LATIN_SMALL_LETTER_T `0x74`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_u","title":"define LATIN_SMALL_LETTER_U","text":"<pre><code>#define LATIN_SMALL_LETTER_U `0x75`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_u_with_acute","title":"define LATIN_SMALL_LETTER_U_WITH_ACUTE","text":"<pre><code>#define LATIN_SMALL_LETTER_U_WITH_ACUTE `0xA3`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_u_with_circumflex","title":"define LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX","text":"<pre><code>#define LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX `0x96`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_u_with_diaeresis","title":"define LATIN_SMALL_LETTER_U_WITH_DIAERESIS","text":"<pre><code>#define LATIN_SMALL_LETTER_U_WITH_DIAERESIS `0x81`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_u_with_grave","title":"define LATIN_SMALL_LETTER_U_WITH_GRAVE","text":"<pre><code>#define LATIN_SMALL_LETTER_U_WITH_GRAVE `0x97`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_v","title":"define LATIN_SMALL_LETTER_V","text":"<pre><code>#define LATIN_SMALL_LETTER_V `0x76`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_w","title":"define LATIN_SMALL_LETTER_W","text":"<pre><code>#define LATIN_SMALL_LETTER_W `0x77`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_x","title":"define LATIN_SMALL_LETTER_X","text":"<pre><code>#define LATIN_SMALL_LETTER_X `0x78`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_y","title":"define LATIN_SMALL_LETTER_Y","text":"<pre><code>#define LATIN_SMALL_LETTER_Y `0x79`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_y_with_diaeresis","title":"define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS","text":"<pre><code>#define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS `0x98`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_letter_z","title":"define LATIN_SMALL_LETTER_Z","text":"<pre><code>#define LATIN_SMALL_LETTER_Z `0x7A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-latin_small_ligature_ae","title":"define LATIN_SMALL_LIGATURE_AE","text":"<pre><code>#define LATIN_SMALL_LIGATURE_AE `0x91`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-left_curly_bracket","title":"define LEFT_CURLY_BRACKET","text":"<pre><code>#define LEFT_CURLY_BRACKET `0x7B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-left_half_block","title":"define LEFT_HALF_BLOCK","text":"<pre><code>#define LEFT_HALF_BLOCK `0xDD`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-left_parenthesis","title":"define LEFT_PARENTHESIS","text":"<pre><code>#define LEFT_PARENTHESIS `0x28`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-left_pointing_double_angle_quotation_mark","title":"define LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK","text":"<pre><code>#define LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK `0xAE`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-left_square_bracket","title":"define LEFT_SQUARE_BRACKET","text":"<pre><code>#define LEFT_SQUARE_BRACKET `0x5B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-less_than_or_equal_to","title":"define LESS_THAN_OR_EQUAL_TO","text":"<pre><code>#define LESS_THAN_OR_EQUAL_TO `0xF3`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-less_than_sign","title":"define LESS_THAN_SIGN","text":"<pre><code>#define LESS_THAN_SIGN `0x3C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-light_shade","title":"define LIGHT_SHADE","text":"<pre><code>#define LIGHT_SHADE `0xB0`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-line_feed","title":"define LINE_FEED","text":"<pre><code>#define LINE_FEED `0x0A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-lower_half_block","title":"define LOWER_HALF_BLOCK","text":"<pre><code>#define LOWER_HALF_BLOCK `0xDC`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-low_line","title":"define LOW_LINE","text":"<pre><code>#define LOW_LINE `0x5F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-masculine_ordinal_indicator","title":"define MASCULINE_ORDINAL_INDICATOR","text":"<pre><code>#define MASCULINE_ORDINAL_INDICATOR `0xA7`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-medium_shade","title":"define MEDIUM_SHADE","text":"<pre><code>#define MEDIUM_SHADE `0xB1`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-micro_sign","title":"define MICRO_SIGN","text":"<pre><code>#define MICRO_SIGN `0xE6`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-middle_dot","title":"define MIDDLE_DOT","text":"<pre><code>#define MIDDLE_DOT `0xFA`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-negative_acknowledge","title":"define NEGATIVE_ACKNOWLEDGE","text":"<pre><code>#define NEGATIVE_ACKNOWLEDGE `0x15`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-not_sign","title":"define NOT_SIGN","text":"<pre><code>#define NOT_SIGN `0xAA`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-no_break_space","title":"define NO_BREAK_SPACE","text":"<pre><code>#define NO_BREAK_SPACE `0xFF`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-nul_char","title":"define NUL_CHAR","text":"<pre><code>#define NUL_CHAR `0x00`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-number_sign","title":"define NUMBER_SIGN","text":"<pre><code>#define NUMBER_SIGN `0x23`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-percent_sign","title":"define PERCENT_SIGN","text":"<pre><code>#define PERCENT_SIGN `0x25`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-peseta_sign","title":"define PESETA_SIGN","text":"<pre><code>#define PESETA_SIGN `0x9E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-plus_minus_sign","title":"define PLUS_MINUS_SIGN","text":"<pre><code>#define PLUS_MINUS_SIGN `0xF1`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-plus_sign","title":"define PLUS_SIGN","text":"<pre><code>#define PLUS_SIGN `0x2B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-pound_sign","title":"define POUND_SIGN","text":"<pre><code>#define POUND_SIGN `0x9C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-question_mark","title":"define QUESTION_MARK","text":"<pre><code>#define QUESTION_MARK `0x3F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-quotation_mark","title":"define QUOTATION_MARK","text":"<pre><code>#define QUOTATION_MARK `0x22`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-record_separator","title":"define RECORD_SEPARATOR","text":"<pre><code>#define RECORD_SEPARATOR `0x1E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-reversed_not_sign","title":"define REVERSED_NOT_SIGN","text":"<pre><code>#define REVERSED_NOT_SIGN `0xA9`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-reverse_solidus","title":"define REVERSE_SOLIDUS","text":"<pre><code>#define REVERSE_SOLIDUS `0x5C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-right_curly_bracket","title":"define RIGHT_CURLY_BRACKET","text":"<pre><code>#define RIGHT_CURLY_BRACKET `0x7D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-right_half_block","title":"define RIGHT_HALF_BLOCK","text":"<pre><code>#define RIGHT_HALF_BLOCK `0xDE`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-right_parenthesis","title":"define RIGHT_PARENTHESIS","text":"<pre><code>#define RIGHT_PARENTHESIS `0x29`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-right_pointing_double_angle_quotation_mark","title":"define RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK","text":"<pre><code>#define RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK `0xAF`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-right_square_bracket","title":"define RIGHT_SQUARE_BRACKET","text":"<pre><code>#define RIGHT_SQUARE_BRACKET `0x5D`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-semicolon","title":"define SEMICOLON","text":"<pre><code>#define SEMICOLON `0x3B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-shift_in","title":"define SHIFT_IN","text":"<pre><code>#define SHIFT_IN `0x0F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-shift_out","title":"define SHIFT_OUT","text":"<pre><code>#define SHIFT_OUT `0x0E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-solidus","title":"define SOLIDUS","text":"<pre><code>#define SOLIDUS `0x2F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-space","title":"define SPACE","text":"<pre><code>#define SPACE `0x20`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-square_root","title":"define SQUARE_ROOT","text":"<pre><code>#define SQUARE_ROOT `0xFB`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-start_of_heading","title":"define START_OF_HEADING","text":"<pre><code>#define START_OF_HEADING `0x01`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-start_of_text","title":"define START_OF_TEXT","text":"<pre><code>#define START_OF_TEXT `0x02`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-substitute","title":"define SUBSTITUTE","text":"<pre><code>#define SUBSTITUTE `0x1A`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-superscript_latin_small_letter_n","title":"define SUPERSCRIPT_LATIN_SMALL_LETTER_N","text":"<pre><code>#define SUPERSCRIPT_LATIN_SMALL_LETTER_N `0xFC`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-superscript_two","title":"define SUPERSCRIPT_TWO","text":"<pre><code>#define SUPERSCRIPT_TWO `0xFD`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-synchronous_idle","title":"define SYNCHRONOUS_IDLE","text":"<pre><code>#define SYNCHRONOUS_IDLE `0x16`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-tilde","title":"define TILDE","text":"<pre><code>#define TILDE `0x7E`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-top_half_integral","title":"define TOP_HALF_INTEGRAL","text":"<pre><code>#define TOP_HALF_INTEGRAL `0xF4`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-unit_separator","title":"define UNIT_SEPARATOR","text":"<pre><code>#define UNIT_SEPARATOR `0x1F`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-upper_half_block","title":"define UPPER_HALF_BLOCK","text":"<pre><code>#define UPPER_HALF_BLOCK `0xDF`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-vertical_line","title":"define VERTICAL_LINE","text":"<pre><code>#define VERTICAL_LINE `0x7C`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-vertical_tabulation","title":"define VERTICAL_TABULATION","text":"<pre><code>#define VERTICAL_TABULATION `0x0B`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-vulgar_fraction_one_half","title":"define VULGAR_FRACTION_ONE_HALF","text":"<pre><code>#define VULGAR_FRACTION_ONE_HALF `0xAB`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-vulgar_fraction_one_quarter","title":"define VULGAR_FRACTION_ONE_QUARTER","text":"<pre><code>#define VULGAR_FRACTION_ONE_QUARTER `0xAC`\n</code></pre>"},{"location":"t-deck-keyboard/keys_8hpp/#define-yen_sign","title":"define YEN_SIGN","text":"<pre><code>#define YEN_SIGN `0x9D`\n</code></pre> <p>The documentation for this class was generated from the following file <code>keyboard/keys.hpp</code></p>"},{"location":"t-deck-keyboard/keys_8hpp_source/","title":"File keys.hpp","text":"<p>File List &gt; keyboard &gt; keys.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef KEYS_HPP\n#define KEYS_HPP\n\n#define NUL_CHAR 0x00    // NUL\n#define START_OF_HEADING 0x01    // SOH\n#define START_OF_TEXT 0x02    // STX\n#define END_OF_TEXT 0x03    // ETX\n#define END_OF_TRANSMISSION 0x04    // EOT\n#define ENQUIRY 0x05    // ENQ\n#define ACKNOWLEDGE 0x06    // ACK\n#define BELL 0x07    // BEL\n#define BACKSPACE 0x08    // BS\n#define HORIZONTAL_TABULATION 0x09    // HT\n#define LINE_FEED 0x0A    // LF\n#define VERTICAL_TABULATION 0x0B    // VT\n#define FORM_FEED 0x0C    // FF\n#define CARRIAGE_RETURN 0x0D    // CR\n#define SHIFT_OUT 0x0E    // SO\n#define SHIFT_IN 0x0F    // SI\n#define DATA_LINK_ESCAPE 0x10    // DLE\n#define DEVICE_CONTROL_ONE 0x11    // DC1\n#define DEVICE_CONTROL_TWO 0x12    // DC2\n#define DEVICE_CONTROL_THREE 0x13    // DC3\n#define DEVICE_CONTROL_FOUR 0x14    // DC4\n#define NEGATIVE_ACKNOWLEDGE 0x15    // NAK\n#define SYNCHRONOUS_IDLE 0x16    // SYN\n#define END_OF_TRANSMISSION_BLOCK 0x17    // ETB\n#define CANCEL 0x18    // CAN\n#define END_OF_MEDIUM 0x19    // EM\n#define SUBSTITUTE 0x1A    // SUB\n#define ESCAPE 0x1B    // ESC\n#define FILE_SEPARATOR 0x1C    // FS\n#define GROUP_SEPARATOR 0x1D    // GS\n#define RECORD_SEPARATOR 0x1E    // RS\n#define UNIT_SEPARATOR 0x1F    // US,\n#define SPACE 0x20    // SP\n#define EXCLAMATION_MARK 0x21    // !\n#define QUOTATION_MARK 0x22    // \"\n#define NUMBER_SIGN 0x23    // #\n#define DOLLAR_SIGN 0x24    // $\n#define PERCENT_SIGN 0x25    // %\n#define AMPERSAND 0x26    // &amp;\n#define APOSTROPHE 0x27    // '\n#define LEFT_PARENTHESIS 0x28    // (\n#define RIGHT_PARENTHESIS 0x29    // )\n#define ASTERISK 0x2A    // *\n#define PLUS_SIGN 0x2B    // +\n#define COMMA 0x2C    // ,\n#define HYPHEN_MINUS 0x2D    // -\n#define FULL_STOP 0x2E    // .\n#define SOLIDUS 0x2F    // /,\n#define DIGIT_ZERO 0x30    // 0\n#define DIGIT_ONE 0x31    // 1\n#define DIGIT_TWO 0x32    // 2\n#define DIGIT_THREE 0x33    // 3\n#define DIGIT_FOUR 0x34    // 4\n#define DIGIT_FIVE 0x35    // 5\n#define DIGIT_SIX 0x36    // 6\n#define DIGIT_SEVEN 0x37    // 7\n#define DIGIT_EIGHT 0x38    // 8\n#define DIGIT_NINE 0x39    // 9\n#define COLON 0x3A    // :\n#define SEMICOLON 0x3B    // ;\n#define LESS_THAN_SIGN 0x3C    // &lt;\n#define EQUALS_SIGN 0x3D    // =\n#define GREATER_THAN_SIGN 0x3E    // &gt;\n#define QUESTION_MARK 0x3F    // ?\n#define COMMERCIAL_AT 0x40    // @\n#define LATIN_CAPITAL_LETTER_A 0x41    // A\n#define LATIN_CAPITAL_LETTER_B 0x42    // B\n#define LATIN_CAPITAL_LETTER_C 0x43    // C\n#define LATIN_CAPITAL_LETTER_D 0x44    // D\n#define LATIN_CAPITAL_LETTER_E 0x45    // E\n#define LATIN_CAPITAL_LETTER_F 0x46    // F\n#define LATIN_CAPITAL_LETTER_G 0x47    // G\n#define LATIN_CAPITAL_LETTER_H 0x48    // H\n#define LATIN_CAPITAL_LETTER_I 0x49    // I\n#define LATIN_CAPITAL_LETTER_J 0x4A    // J\n#define LATIN_CAPITAL_LETTER_K 0x4B    // K\n#define LATIN_CAPITAL_LETTER_L 0x4C    // L\n#define LATIN_CAPITAL_LETTER_M 0x4D    // M\n#define LATIN_CAPITAL_LETTER_N 0x4E    // N\n#define LATIN_CAPITAL_LETTER_O 0x4F    // O\n#define LATIN_CAPITAL_LETTER_P 0x50    // P\n#define LATIN_CAPITAL_LETTER_Q 0x51    // Q\n#define LATIN_CAPITAL_LETTER_R 0x52    // R\n#define LATIN_CAPITAL_LETTER_S 0x53    // S\n#define LATIN_CAPITAL_LETTER_T 0x54    // T\n#define LATIN_CAPITAL_LETTER_U 0x55    // U\n#define LATIN_CAPITAL_LETTER_V 0x56    // V\n#define LATIN_CAPITAL_LETTER_W 0x57    // W\n#define LATIN_CAPITAL_LETTER_X 0x58    // X\n#define LATIN_CAPITAL_LETTER_Y 0x59    // Y\n#define LATIN_CAPITAL_LETTER_Z 0x5A    // Z\n#define LEFT_SQUARE_BRACKET 0x5B    // [\n#define REVERSE_SOLIDUS 0x5C    // `\\`\n#define RIGHT_SQUARE_BRACKET 0x5D    // ]\n#define CIRCUMFLEX_ACCENT 0x5E    // ^\n#define LOW_LINE 0x5F    // _\n#define GRAVE_ACCENT 0x60    // `\n#define LATIN_SMALL_LETTER_A 0x61    // a\n#define LATIN_SMALL_LETTER_B 0x62    // b\n#define LATIN_SMALL_LETTER_C 0x63    // c\n#define LATIN_SMALL_LETTER_D 0x64    // d\n#define LATIN_SMALL_LETTER_E 0x65    // e\n#define LATIN_SMALL_LETTER_F 0x66    // f\n#define LATIN_SMALL_LETTER_G 0x67    // g\n#define LATIN_SMALL_LETTER_H 0x68    // h\n#define LATIN_SMALL_LETTER_I 0x69    // i\n#define LATIN_SMALL_LETTER_J 0x6A    // j\n#define LATIN_SMALL_LETTER_K 0x6B    // k\n#define LATIN_SMALL_LETTER_L 0x6C    // l\n#define LATIN_SMALL_LETTER_M 0x6D    // m\n#define LATIN_SMALL_LETTER_N 0x6E    // n\n#define LATIN_SMALL_LETTER_O 0x6F    // o\n#define LATIN_SMALL_LETTER_P 0x70    // p\n#define LATIN_SMALL_LETTER_Q 0x71    // q\n#define LATIN_SMALL_LETTER_R 0x72    // r\n#define LATIN_SMALL_LETTER_S 0x73    // s\n#define LATIN_SMALL_LETTER_T 0x74    // t\n#define LATIN_SMALL_LETTER_U 0x75    // u\n#define LATIN_SMALL_LETTER_V 0x76    // v\n#define LATIN_SMALL_LETTER_W 0x77    // w\n#define LATIN_SMALL_LETTER_X 0x78    // x\n#define LATIN_SMALL_LETTER_Y 0x79    // y\n#define LATIN_SMALL_LETTER_Z 0x7A    // z\n#define LEFT_CURLY_BRACKET 0x7B    // {\n#define VERTICAL_LINE 0x7C    // |\n#define RIGHT_CURLY_BRACKET 0x7D    // }\n#define TILDE 0x7E    // ~\n#define DELETE 0x7F    // DEL\n#define LATIN_CAPITAL_LETTER_C_WITH_CEDILLA 0x80    // \u00c7\n#define LATIN_SMALL_LETTER_U_WITH_DIAERESIS 0x81    // \u00fc\n#define LATIN_SMALL_LETTER_E_WITH_ACUTE 0x82    // \u00e9\n#define LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX 0x83    // \u00e2\n#define LATIN_SMALL_LETTER_A_WITH_DIAERESIS 0x84    // \u00e4\n#define LATIN_SMALL_LETTER_A_WITH_GRAVE 0x85    // \u00e0\n#define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE 0x86    // \u00e5\n#define LATIN_SMALL_LETTER_C_WITH_CEDILLA 0x87    // \u00e7\n#define LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX 0x88    // \u00ea\n#define LATIN_SMALL_LETTER_E_WITH_DIAERESIS 0x89    // \u00eb\n#define LATIN_SMALL_LETTER_E_WITH_GRAVE 0x8A    // \u00e8\n#define LATIN_SMALL_LETTER_I_WITH_DIAERESIS 0x8B    // \u00ef\n#define LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX 0x8C    // \u00ee\n#define LATIN_SMALL_LETTER_I_WITH_GRAVE 0x8D    // \u00ec\n#define LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS 0x8E    // \u00c4\n#define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE 0x8F    // \u00c5\n#define LATIN_CAPITAL_LETTER_E_WITH_ACUTE 0x90    // \u00c9\n#define LATIN_SMALL_LIGATURE_AE 0x91    // \u00e6\n#define LATIN_CAPITAL_LIGATURE_AE 0x92    // \u00c6\n#define LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX 0x93    // \u00f4\n#define LATIN_SMALL_LETTER_O_WITH_DIAERESIS 0x94    // \u00f6\n#define LATIN_SMALL_LETTER_O_WITH_GRAVE 0x95    // \u00f2\n#define LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX 0x96    // \u00fb\n#define LATIN_SMALL_LETTER_U_WITH_GRAVE 0x97    // \u00f9\n#define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS 0x98    // \u00ff\n#define LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS 0x99    // \u00d6\n#define LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS 0x9A    // \u00dc\n#define CENT_SIGN 0x9B    // \u00a2\n#define POUND_SIGN 0x9C    // \u00a3\n#define YEN_SIGN 0x9D    // \u00a5\n#define PESETA_SIGN 0x9E    // \u20a7\n#define LATIN_SMALL_LETTER_F_WITH_HOOK 0x9F    // \u0192\n#define LATIN_SMALL_LETTER_A_WITH_ACUTE 0xA0    // \u00e1\n#define LATIN_SMALL_LETTER_I_WITH_ACUTE 0xA1    // \u00ed\n#define LATIN_SMALL_LETTER_O_WITH_ACUTE 0xA2    // \u00f3\n#define LATIN_SMALL_LETTER_U_WITH_ACUTE 0xA3    // \u00fa\n#define LATIN_SMALL_LETTER_N_WITH_TILDE 0xA4    // \u00f1\n#define LATIN_CAPITAL_LETTER_N_WITH_TILDE 0xA5    // \u00d1\n#define FEMININE_ORDINAL_INDICATOR 0xA6    // \u00aa\n#define MASCULINE_ORDINAL_INDICATOR 0xA7    // \u00ba\n#define INVERTED_QUESTION_MARK 0xA8    // \u00bf\n#define REVERSED_NOT_SIGN 0xA9    // \u2310\n#define NOT_SIGN 0xAA    // \u00ac\n#define VULGAR_FRACTION_ONE_HALF 0xAB    // \u00bd\n#define VULGAR_FRACTION_ONE_QUARTER 0xAC    // \u00bc\n#define INVERTED_EXCLAMATION_MARK 0xAD    // \u00a1\n#define LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK 0xAE    // \u00ab\n#define RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK 0xAF    // \u00bb\n#define LIGHT_SHADE 0xB0    // \u2591\n#define MEDIUM_SHADE 0xB1    // \u2592\n#define DARK_SHADE 0xB2    // \u2593\n#define BOX_DRAWINGS_LIGHT_VERTICAL 0xB3    // \u2502\n#define BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT 0xB4    // \u2524\n#define BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE 0xB5    // \u2561\n#define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE 0xB6    // \u2562\n#define BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE 0xB7    // \u2556\n#define BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE 0xB8    // \u2555\n#define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT 0xB9    // \u2563\n#define BOX_DRAWINGS_DOUBLE_VERTICAL 0xBA    // \u2551\n#define BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT 0xBB    // \u2557\n#define BOX_DRAWINGS_DOUBLE_UP_AND_LEFT 0xBC    // \u255d\n#define BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE 0xBD    // \u255c\n#define BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE 0xBE    // \u255b\n#define BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT 0xBF    // \u2510\n#define BOX_DRAWINGS_LIGHT_UP_AND_RIGHT 0xC0    // \u2514\n#define BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL 0xC1    // \u2534\n#define BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL 0xC2    // \u252c\n#define BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT 0xC3    // \u251c\n#define BOX_DRAWINGS_LIGHT_HORIZONTAL 0xC4    // \u2500\n#define BOX_DRAWINGS_LIGHT_VERTICAL_AND_HORIZONTAL 0xC5    // \u253c\n#define BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE 0xC6    // \u255e\n#define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE 0xC7    // \u255f\n#define BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT 0xC8    // \u255a\n#define BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT 0xC9    // \u2554\n#define BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL 0xCA    // \u2569\n#define BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL 0xCB    // \u2566\n#define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT 0xCC    // \u2560\n#define BOX_DRAWINGS_DOUBLE_HORIZONTAL 0xCD    // \u2550\n#define BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL 0xCE    // \u256c\n#define BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE 0xCF    // \u2567\n#define BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE 0xD0    // \u2568\n#define BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE 0xD1    // \u2564\n#define BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE 0xD2    // \u2565\n#define BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE 0xD3    // \u2559\n#define BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE 0xD4    // \u2558\n#define BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE 0xD5    // \u2552\n#define BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE 0xD6    // \u2553\n#define BOX_DRAWINGS_VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE 0xD7    // \u256b\n#define BOX_DRAWINGS_VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE 0xD8    // \u256a\n#define BOX_DRAWINGS_LIGHT_UP_AND_LEFT 0xD9    // \u2518\n#define BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT 0xDA    // \u250c\n#define FULL_BLOCK 0xDB    // \u2588\n#define LOWER_HALF_BLOCK 0xDC    // \u2584\n#define LEFT_HALF_BLOCK 0xDD    // \u258c\n#define RIGHT_HALF_BLOCK 0xDE    // \u2590\n#define UPPER_HALF_BLOCK 0xDF    // \u2580\n#define GREEK_SMALL_LETTER_ALPHA 0xE0    // \u03b1\n#define LATIN_SMALL_LETTER_SHARP_S 0xE1    // \u00df\n#define GREEK_CAPITAL_LETTER_GAMMA 0xE2    // \u0393\n#define GREEK_SMALL_LETTER_PI 0xE3    // \u03c0\n#define GREEK_CAPITAL_LETTER_SIGMA 0xE4    // \u03a3\n#define GREEK_SMALL_LETTER_SIGMA 0xE5    // \u03c3\n#define MICRO_SIGN 0xE6    // \u00b5\n#define GREEK_SMALL_LETTER_TAU 0xE7    // \u03c4\n#define GREEK_CAPITAL_LETTER_PHI 0xE8    // \u03a6\n#define GREEK_CAPITAL_LETTER_THETA 0xE9    // \u0398\n#define GREEK_CAPITAL_LETTER_OMEGA 0xEA    // \u03a9\n#define GREEK_SMALL_LETTER_DELTA 0xEB    // \u03b4\n#define INFINITY 0xEC    // \u221e\n#define GREEK_SMALL_LETTER_PHI 0xED    // \u03c6\n#define GREEK_SMALL_LETTER_EPSILON 0xEE    // \u03b5\n#define INTERSECTION 0xEF    // \u2229\n#define IDENTICAL_TO 0xF0    // \u2261\n#define PLUS_MINUS_SIGN 0xF1    // \u00b1\n#define GREATER_THAN_OR_EQUAL_TO 0xF2    // \u2265\n#define LESS_THAN_OR_EQUAL_TO 0xF3    // \u2264\n#define TOP_HALF_INTEGRAL 0xF4    // \u2320\n#define BOTTOM_HALF_INTEGRAL 0xF5    // \u2321\n#define DIVISION_SIGN 0xF6    // \u00f7\n#define ALMOST_EQUAL_TO 0xF7    // \u2248\n#define DEGREE_SIGN 0xF8    // \u00b0\n#define BULLET_OPERATOR 0xF9    // \u2219\n#define MIDDLE_DOT 0xFA    // \u00b7\n#define SQUARE_ROOT 0xFB    // \u221a\n#define SUPERSCRIPT_LATIN_SMALL_LETTER_N 0xFC    // \u207f\n#define SUPERSCRIPT_TWO 0xFD    // \u00b2\n#define BLACK_SQUARE 0xFE    // \u25a0\n#define NO_BREAK_SPACE 0xFF    // NBS\n\n#endif // KEYS_HPP\n</code></pre>"},{"location":"t-deck-keyboard/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p>"},{"location":"t-deck-keyboard/classes/","title":"Class Index","text":""},{"location":"t-deck-keyboard/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p>"},{"location":"t-deck-keyboard/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"t-deck-keyboard/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"t-deck-keyboard/class_members/","title":"Class Members","text":"<p>Nothing related to Class Members found.</p>"},{"location":"t-deck-keyboard/class_member_functions/","title":"Class Member Functions","text":"<p>Nothing related to Class Member Functions found.</p>"},{"location":"t-deck-keyboard/class_member_variables/","title":"Class Member Variables","text":"<p>Nothing related to Class Member Variables found.</p>"},{"location":"t-deck-keyboard/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"t-deck-keyboard/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"t-deck-keyboard/namespace_members/","title":"Namespace Members","text":"<p>Nothing related to Namespace Members found.</p>"},{"location":"t-deck-keyboard/namespace_member_functions/","title":"Namespace Member Functions","text":"<p>Nothing related to Namespace Member Functions found.</p>"},{"location":"t-deck-keyboard/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"t-deck-keyboard/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"t-deck-keyboard/namespace_member_enums/","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"t-deck-keyboard/functions/","title":"Functions","text":""},{"location":"t-deck-keyboard/functions/#a","title":"a","text":"<ul> <li>autoResetKeymapIndex (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/functions/#d","title":"d","text":"<ul> <li>doesKeyExistInKeymap (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/functions/#h","title":"h","text":"<ul> <li>handleCharacter (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/functions/#k","title":"k","text":"<ul> <li>keyHeld (keyboard.cpp, keyboard.hpp)</li> <li>keyNotPressed (keyboard.cpp, keyboard.hpp)</li> <li>keyPressed (keyboard.cpp, keyboard.hpp)</li> <li>keyReleased (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/functions/#o","title":"o","text":"<ul> <li>onRequest (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/functions/#p","title":"p","text":"<ul> <li>printKeyInfo (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/functions/#r","title":"r","text":"<ul> <li>readKeyMatrix (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/functions/#s","title":"s","text":"<ul> <li>sendKeyInfo (keyboard.cpp, keyboard.hpp)</li> <li>setDefaultCharacter (keyboard.cpp, keyboard.hpp)</li> <li>setKeyboardBrightness (keyboard.cpp, keyboard.hpp)</li> <li>setSymbolCharacter (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/","title":"Macros","text":""},{"location":"t-deck-keyboard/macros/#a","title":"a","text":"<ul> <li>ACKNOWLEDGE (keys.hpp)</li> <li>ALMOST_EQUAL_TO (keys.hpp)</li> <li>AMPERSAND (keys.hpp)</li> <li>APOSTROPHE (keys.hpp)</li> <li>ASTERISK (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#b","title":"b","text":"<ul> <li>BACKSPACE (keys.hpp)</li> <li>BELL (keys.hpp)</li> <li>BLACK_SQUARE (keys.hpp)</li> <li>BOTTOM_HALF_INTEGRAL (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_UP_AND_LEFT (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_VERTICAL (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT (keys.hpp)</li> <li>BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT (keys.hpp)</li> <li>BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_UP_AND_LEFT (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_UP_AND_RIGHT (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_VERTICAL (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_VERTICAL_AND_HORIZONTAL (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT (keys.hpp)</li> <li>BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT (keys.hpp)</li> <li>BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE (keys.hpp)</li> <li>BOX_DRAWINGS_VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE (keys.hpp)</li> <li>BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE (keys.hpp)</li> <li>BULLET_OPERATOR (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#c","title":"c","text":"<ul> <li>COL_COUNT (keyboard.hpp)</li> <li>CANCEL (keys.hpp)</li> <li>CARRIAGE_RETURN (keys.hpp)</li> <li>CENT_SIGN (keys.hpp)</li> <li>CIRCUMFLEX_ACCENT (keys.hpp)</li> <li>COLON (keys.hpp)</li> <li>COMMA (keys.hpp)</li> <li>COMMERCIAL_AT (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#d","title":"d","text":"<ul> <li>DEBOUNCE_DELAY (keyboard.hpp)</li> <li>DARK_SHADE (keys.hpp)</li> <li>DATA_LINK_ESCAPE (keys.hpp)</li> <li>DEGREE_SIGN (keys.hpp)</li> <li>DELETE (keys.hpp)</li> <li>DEVICE_CONTROL_FOUR (keys.hpp)</li> <li>DEVICE_CONTROL_ONE (keys.hpp)</li> <li>DEVICE_CONTROL_THREE (keys.hpp)</li> <li>DEVICE_CONTROL_TWO (keys.hpp)</li> <li>DIGIT_EIGHT (keys.hpp)</li> <li>DIGIT_FIVE (keys.hpp)</li> <li>DIGIT_FOUR (keys.hpp)</li> <li>DIGIT_NINE (keys.hpp)</li> <li>DIGIT_ONE (keys.hpp)</li> <li>DIGIT_SEVEN (keys.hpp)</li> <li>DIGIT_SIX (keys.hpp)</li> <li>DIGIT_THREE (keys.hpp)</li> <li>DIGIT_TWO (keys.hpp)</li> <li>DIGIT_ZERO (keys.hpp)</li> <li>DIVISION_SIGN (keys.hpp)</li> <li>DOLLAR_SIGN (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#e","title":"e","text":"<ul> <li>END_OF_MEDIUM (keys.hpp)</li> <li>END_OF_TEXT (keys.hpp)</li> <li>END_OF_TRANSMISSION (keys.hpp)</li> <li>END_OF_TRANSMISSION_BLOCK (keys.hpp)</li> <li>ENQUIRY (keys.hpp)</li> <li>EQUALS_SIGN (keys.hpp)</li> <li>ESCAPE (keys.hpp)</li> <li>EXCLAMATION_MARK (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#f","title":"f","text":"<ul> <li>FUNCTION_DOWN (keyboard.hpp)</li> <li>FUNCTION_TOGGLE (keyboard.hpp)</li> <li>FUNCTION_UP (keyboard.hpp)</li> <li>FEMININE_ORDINAL_INDICATOR (keys.hpp)</li> <li>FILE_SEPARATOR (keys.hpp)</li> <li>FORM_FEED (keys.hpp)</li> <li>FULL_BLOCK (keys.hpp)</li> <li>FULL_STOP (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#g","title":"g","text":"<ul> <li>GRAVE_ACCENT (keys.hpp)</li> <li>GREATER_THAN_OR_EQUAL_TO (keys.hpp)</li> <li>GREATER_THAN_SIGN (keys.hpp)</li> <li>GREEK_CAPITAL_LETTER_GAMMA (keys.hpp)</li> <li>GREEK_CAPITAL_LETTER_OMEGA (keys.hpp)</li> <li>GREEK_CAPITAL_LETTER_PHI (keys.hpp)</li> <li>GREEK_CAPITAL_LETTER_SIGMA (keys.hpp)</li> <li>GREEK_CAPITAL_LETTER_THETA (keys.hpp)</li> <li>GREEK_SMALL_LETTER_ALPHA (keys.hpp)</li> <li>GREEK_SMALL_LETTER_DELTA (keys.hpp)</li> <li>GREEK_SMALL_LETTER_EPSILON (keys.hpp)</li> <li>GREEK_SMALL_LETTER_PHI (keys.hpp)</li> <li>GREEK_SMALL_LETTER_PI (keys.hpp)</li> <li>GREEK_SMALL_LETTER_SIGMA (keys.hpp)</li> <li>GREEK_SMALL_LETTER_TAU (keys.hpp)</li> <li>GROUP_SEPARATOR (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#h","title":"h","text":"<ul> <li>HORIZONTAL_TABULATION (keys.hpp)</li> <li>HYPHEN_MINUS (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#i","title":"i","text":"<ul> <li>I2C_DEV_ADDR (keyboard.hpp)</li> <li>IDENTICAL_TO (keys.hpp)</li> <li>INFINITY (keys.hpp)</li> <li>INTERSECTION (keys.hpp)</li> <li>INVERTED_EXCLAMATION_MARK (keys.hpp)</li> <li>INVERTED_QUESTION_MARK (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#k","title":"k","text":"<ul> <li>KEYBOARD_BACKLIGHT_PIN (keyboard.hpp)</li> <li>KEYBOARD_BRIGHTNESS_CH (keyboard.hpp)</li> <li>KEYBOARD_BRIGHTNESS_DEFAULT (keyboard.hpp)</li> <li>KEYBOARD_BRIGHTNESS_FREQ (keyboard.hpp)</li> <li>KEYBOARD_BRIGHTNESS_MAX (keyboard.hpp)</li> <li>KEYBOARD_BRIGHTNESS_MIN (keyboard.hpp)</li> <li>KEYBOARD_BRIGHTNESS_RES (keyboard.hpp)</li> <li>KEYBOARD_BRIGHTNESS_STEP (keyboard.hpp)</li> <li>KEY_INFO_SIZE (keyboard.hpp)</li> <li>KEY_REPEAT_DELAY (keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#l","title":"l","text":"<ul> <li>LATIN_CAPITAL_LETTER_A (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_B (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_C (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_C_WITH_CEDILLA (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_D (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_E (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_E_WITH_ACUTE (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_F (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_G (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_H (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_I (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_J (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_K (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_L (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_M (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_N (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_N_WITH_TILDE (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_O (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_P (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_Q (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_R (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_S (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_T (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_U (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_V (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_W (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_X (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_Y (keys.hpp)</li> <li>LATIN_CAPITAL_LETTER_Z (keys.hpp)</li> <li>LATIN_CAPITAL_LIGATURE_AE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_A (keys.hpp)</li> <li>LATIN_SMALL_LETTER_A_WITH_ACUTE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX (keys.hpp)</li> <li>LATIN_SMALL_LETTER_A_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_SMALL_LETTER_A_WITH_GRAVE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_A_WITH_RING_ABOVE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_B (keys.hpp)</li> <li>LATIN_SMALL_LETTER_C (keys.hpp)</li> <li>LATIN_SMALL_LETTER_C_WITH_CEDILLA (keys.hpp)</li> <li>LATIN_SMALL_LETTER_D (keys.hpp)</li> <li>LATIN_SMALL_LETTER_E (keys.hpp)</li> <li>LATIN_SMALL_LETTER_E_WITH_ACUTE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX (keys.hpp)</li> <li>LATIN_SMALL_LETTER_E_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_SMALL_LETTER_E_WITH_GRAVE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_F (keys.hpp)</li> <li>LATIN_SMALL_LETTER_F_WITH_HOOK (keys.hpp)</li> <li>LATIN_SMALL_LETTER_G (keys.hpp)</li> <li>LATIN_SMALL_LETTER_H (keys.hpp)</li> <li>LATIN_SMALL_LETTER_I (keys.hpp)</li> <li>LATIN_SMALL_LETTER_I_WITH_ACUTE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX (keys.hpp)</li> <li>LATIN_SMALL_LETTER_I_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_SMALL_LETTER_I_WITH_GRAVE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_J (keys.hpp)</li> <li>LATIN_SMALL_LETTER_K (keys.hpp)</li> <li>LATIN_SMALL_LETTER_L (keys.hpp)</li> <li>LATIN_SMALL_LETTER_M (keys.hpp)</li> <li>LATIN_SMALL_LETTER_N (keys.hpp)</li> <li>LATIN_SMALL_LETTER_N_WITH_TILDE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_O (keys.hpp)</li> <li>LATIN_SMALL_LETTER_O_WITH_ACUTE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX (keys.hpp)</li> <li>LATIN_SMALL_LETTER_O_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_SMALL_LETTER_O_WITH_GRAVE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_P (keys.hpp)</li> <li>LATIN_SMALL_LETTER_Q (keys.hpp)</li> <li>LATIN_SMALL_LETTER_R (keys.hpp)</li> <li>LATIN_SMALL_LETTER_S (keys.hpp)</li> <li>LATIN_SMALL_LETTER_SHARP_S (keys.hpp)</li> <li>LATIN_SMALL_LETTER_T (keys.hpp)</li> <li>LATIN_SMALL_LETTER_U (keys.hpp)</li> <li>LATIN_SMALL_LETTER_U_WITH_ACUTE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX (keys.hpp)</li> <li>LATIN_SMALL_LETTER_U_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_SMALL_LETTER_U_WITH_GRAVE (keys.hpp)</li> <li>LATIN_SMALL_LETTER_V (keys.hpp)</li> <li>LATIN_SMALL_LETTER_W (keys.hpp)</li> <li>LATIN_SMALL_LETTER_X (keys.hpp)</li> <li>LATIN_SMALL_LETTER_Y (keys.hpp)</li> <li>LATIN_SMALL_LETTER_Y_WITH_DIAERESIS (keys.hpp)</li> <li>LATIN_SMALL_LETTER_Z (keys.hpp)</li> <li>LATIN_SMALL_LIGATURE_AE (keys.hpp)</li> <li>LEFT_CURLY_BRACKET (keys.hpp)</li> <li>LEFT_HALF_BLOCK (keys.hpp)</li> <li>LEFT_PARENTHESIS (keys.hpp)</li> <li>LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK (keys.hpp)</li> <li>LEFT_SQUARE_BRACKET (keys.hpp)</li> <li>LESS_THAN_OR_EQUAL_TO (keys.hpp)</li> <li>LESS_THAN_SIGN (keys.hpp)</li> <li>LIGHT_SHADE (keys.hpp)</li> <li>LINE_FEED (keys.hpp)</li> <li>LOWER_HALF_BLOCK (keys.hpp)</li> <li>LOW_LINE (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#m","title":"m","text":"<ul> <li>MAX_KEYMAP_INDEX (keyboard.hpp)</li> <li>MIN_KEYMAP_INDEX (keyboard.hpp)</li> <li>MASCULINE_ORDINAL_INDICATOR (keys.hpp)</li> <li>MEDIUM_SHADE (keys.hpp)</li> <li>MICRO_SIGN (keys.hpp)</li> <li>MIDDLE_DOT (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#n","title":"n","text":"<ul> <li>NEGATIVE_ACKNOWLEDGE (keys.hpp)</li> <li>NOT_SIGN (keys.hpp)</li> <li>NO_BREAK_SPACE (keys.hpp)</li> <li>NUL_CHAR (keys.hpp)</li> <li>NUMBER_SIGN (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#p","title":"p","text":"<ul> <li>PERCENT_SIGN (keys.hpp)</li> <li>PESETA_SIGN (keys.hpp)</li> <li>PLUS_MINUS_SIGN (keys.hpp)</li> <li>PLUS_SIGN (keys.hpp)</li> <li>POUND_SIGN (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#q","title":"q","text":"<ul> <li>QUESTION_MARK (keys.hpp)</li> <li>QUOTATION_MARK (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#r","title":"r","text":"<ul> <li>ROW_COUNT (keyboard.hpp)</li> <li>RECORD_SEPARATOR (keys.hpp)</li> <li>REVERSED_NOT_SIGN (keys.hpp)</li> <li>REVERSE_SOLIDUS (keys.hpp)</li> <li>RIGHT_CURLY_BRACKET (keys.hpp)</li> <li>RIGHT_HALF_BLOCK (keys.hpp)</li> <li>RIGHT_PARENTHESIS (keys.hpp)</li> <li>RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK (keys.hpp)</li> <li>RIGHT_SQUARE_BRACKET (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#s","title":"s","text":"<ul> <li>SCL (keyboard.hpp)</li> <li>SDA (keyboard.hpp)</li> <li>SEMICOLON (keys.hpp)</li> <li>SHIFT_IN (keys.hpp)</li> <li>SHIFT_OUT (keys.hpp)</li> <li>SOLIDUS (keys.hpp)</li> <li>SPACE (keys.hpp)</li> <li>SQUARE_ROOT (keys.hpp)</li> <li>START_OF_HEADING (keys.hpp)</li> <li>START_OF_TEXT (keys.hpp)</li> <li>SUBSTITUTE (keys.hpp)</li> <li>SUPERSCRIPT_LATIN_SMALL_LETTER_N (keys.hpp)</li> <li>SUPERSCRIPT_TWO (keys.hpp)</li> <li>SYNCHRONOUS_IDLE (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#t","title":"t","text":"<ul> <li>TILDE (keys.hpp)</li> <li>TOP_HALF_INTEGRAL (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#u","title":"u","text":"<ul> <li>UNIT_SEPARATOR (keys.hpp)</li> <li>UPPER_HALF_BLOCK (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#v","title":"v","text":"<ul> <li>VERTICAL_LINE (keys.hpp)</li> <li>VERTICAL_TABULATION (keys.hpp)</li> <li>VULGAR_FRACTION_ONE_HALF (keys.hpp)</li> <li>VULGAR_FRACTION_ONE_QUARTER (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/macros/#y","title":"y","text":"<ul> <li>YEN_SIGN (keys.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/","title":"Variables","text":""},{"location":"t-deck-keyboard/variables/#a","title":"a","text":"<ul> <li>altLock (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#b","title":"b","text":"<ul> <li>backlightState (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#c","title":"c","text":"<ul> <li>capsLock (keyboard.cpp, keyboard.hpp)</li> <li>cols (keyboard.cpp, keyboard.hpp)</li> <li>ctrlLock (keyboard.cpp, keyboard.hpp)</li> <li>currentBrightness (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#d","title":"d","text":"<ul> <li>defaultKeymap (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#e","title":"e","text":"<ul> <li>emptyData (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#k","title":"k","text":"<ul> <li>keyInfo (keyboard.cpp, keyboard.hpp)</li> <li>keyRepeatStart (keyboard.cpp, keyboard.hpp)</li> <li>keyStates (keyboard.cpp, keyboard.hpp)</li> <li>keymapIndex (keyboard.cpp, keyboard.hpp)</li> <li>KeyState (keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#l","title":"l","text":"<ul> <li>lastValue (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#r","title":"r","text":"<ul> <li>rows (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/variables/#s","title":"s","text":"<ul> <li>sendData (keyboard.cpp, keyboard.hpp)</li> <li>sendDataFlag (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap1 (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap2 (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap3 (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap4 (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap5 (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap6 (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap7 (keyboard.cpp, keyboard.hpp)</li> <li>symbolKeymap8 (keyboard.cpp)</li> <li>symbolLock (keyboard.cpp, keyboard.hpp)</li> </ul>"},{"location":"t-deck-keyboard/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}